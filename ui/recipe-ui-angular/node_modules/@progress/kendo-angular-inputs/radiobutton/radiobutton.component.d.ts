/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, Renderer2, AfterViewInit, EventEmitter, ChangeDetectorRef, NgZone, Injector, OnInit, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { RadioCheckBoxBase } from '../common/radio-checkbox.base';
import * as i0 from "@angular/core";
export declare class RadioButtonComponent extends RadioCheckBoxBase implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy {
    protected renderer: Renderer2;
    hostElement: ElementRef;
    protected cdr: ChangeDetectorRef;
    protected ngZone: NgZone;
    protected injector: Injector;
    private localizationService;
    hostClass: boolean;
    direction: string;
    /**
     * Specifies the checked state of the RadioButton.
     *
     * @default false
     */
    checked: boolean;
    /**
     * Fires each time the checked state is changed.
     * When the state of the component is programmatically changed to `ngModel` or `formControl`
     * through its API or form binding, the `checkedStateChange` event is not triggered because it
     * might cause a mix-up with the built-in mechanisms of the `ngModel` or `formControl` bindings.
     *
     * Used to provide a two-way binding for the `checked` property.
     */
    checkedChange: EventEmitter<boolean>;
    private subs;
    protected get defaultAttributes(): any;
    constructor(renderer: Renderer2, hostElement: ElementRef, cdr: ChangeDetectorRef, ngZone: NgZone, injector: Injector, localizationService: LocalizationService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    handleChange: ($event: any) => void;
    /**
     * @hidden
     */
    writeValue(value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RadioButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RadioButtonComponent, "kendo-radiobutton", ["kendoRadioButton"], { "checked": { "alias": "checked"; "required": false; }; }, { "checkedChange": "checkedChange"; }, never, never, true, never>;
}
