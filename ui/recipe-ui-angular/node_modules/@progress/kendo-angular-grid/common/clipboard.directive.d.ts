/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { ClipboardService } from './clipboard.service';
import { GridComponent } from '../grid.component';
import { GridClipboardTargetType, GridClipboardEvent, GridClipboardSettings } from './clipboard-types';
import * as i0 from "@angular/core";
/**
 * The directive that enables the Grid built-in clipboard support. Allows copy, cut, and paste interactions
 * with the Grid.
 */
export declare class GridClipboardDirective implements AfterViewInit, OnDestroy {
    private host;
    private clipboardService;
    private renderer;
    private zone;
    /**
     * Determines the target of the clipboard operation ([see example]({% slug clipboard_grid %}#toc-clipboard-target)). The possible options are:
     * - `activeCell`
     * - `selection`
     *
     * @default 'selection'
     */
    set clipboardTarget(value: GridClipboardTargetType);
    get clipboardTarget(): GridClipboardTargetType;
    /**
     * The `GridClipboardDirective` settings.
     *
     * @default { wholeRow: false, copyHeaders: false copy: true, cut: true, paste: true }
     */
    set clipboardSettings(value: GridClipboardSettings);
    get clipboardSettings(): GridClipboardSettings;
    /**
     * Fires when the user performs `cut`, `copy` or `paste` action within the Grid content area.
     */
    clipboard: EventEmitter<GridClipboardEvent>;
    private _target;
    private _clipboardSettings;
    private subs;
    constructor(host: GridComponent, clipboardService: ClipboardService, renderer: Renderer2, zone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private onClipboard;
    private inGrid;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridClipboardDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<GridClipboardDirective, "[kendoGridClipboard]", ["kendoGridClipboard"], { "clipboardTarget": { "alias": "clipboardTarget"; "required": false; }; "clipboardSettings": { "alias": "clipboardSettings"; "required": false; }; }, { "clipboard": "clipboard"; }, never, never, true, never>;
}
