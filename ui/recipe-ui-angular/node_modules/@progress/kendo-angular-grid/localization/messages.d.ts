/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ComponentMessages } from '@progress/kendo-angular-l10n';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class GridMessages extends ComponentMessages {
    /**
     * The text for the empty group panel.
     */
    groupPanelEmpty: string;
    /**
     * The no-records text.
     */
    noRecords: string;
    /**
     * The label of the pager. Follows the pattern **Page {currentPage} of {totalPages}** by default.
     * Тhe default label text when the current page is 1, and the total number of pages is 10 will be
     * **Page navigation, page 1 of 10**.
     *
     * The message consists of several parts - the current page number, the total number of pages, and a localizable string.
     * To allow for reordering its parts, the `pagerLabel` input accepts a string with placeholders for the current page
     * and total number of pages. The `{currentPage}` and `{totalPages}` placeholders will be replaced
     * internally with the respective actual values. [See example](slug:globalization_grid#toc-custom-messages).
     */
    pagerLabel: string;
    /**
     * The label for the **First page** button.
     */
    pagerFirstPage: string;
    /**
     * The label for the **Last page** button.
     */
    pagerLastPage: string;
    /**
     * The label for the **Previous page** button.
     */
    pagerPreviousPage: string;
    /**
     * The label for the **Next page** button.
     */
    pagerNextPage: string;
    /**
     * The text displayed before the pager input.
     */
    pagerPage: string;
    /**
     * The text displayed after the page-size selector.
     */
    pagerItemsPerPage: string;
    /**
     * The text displayed before the total-page number.
     */
    pagerOf: string;
    /**
     * The text displayed after the total number of items.
     */
    pagerItems: string;
    /**
     * The title attribute of the page number input element.
     */
    pagerPageNumberInputTitle: string;
    /**
     * The text of the aria-label attribute applied to the page number input element.
     */
    pagerInputLabel: string;
    /**
     * The text of the title and `aria-label` attributes applied to the page chooser in the Grid Pager.
     */
    pagerSelectPage: string;
    /**
     * The label of the filter cell or icon.
     */
    filter: string;
    /**
     * The label of the filter input.
     *
     * The filter input label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Product Name Filter**.
     *
     * To allow reordering the column name and the localizable part, the `filterInputLabel` accepts a string with a
     * placeholder for the column name, for example, **filter for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **filter for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterInputLabel: string;
    /**
     * The title of the filter menu icon.
     *
     * The title consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default title will be **Product Name Filter Menu**.
     *
     * To allow reordering the column name and the localizable part, the `filterMenuTitle` accepts a string with a
     * placeholder for the column name, for example, **filter for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting title will be rendered as **filter for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterMenuTitle: string;
    /**
     * The label of the filter menu operators DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Product Name Filter Menu Operators**.
     *
     * To allow reordering the column name and the localizable part, the `filterMenuOperatorsDropDownLabel` accepts a string with a
     * placeholder for the column name, for example, **filter operators for {columnName**'. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **filter operators for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterMenuOperatorsDropDownLabel: string;
    /**
     * The label of the filter menu logic DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Product Name Filter Menu Logic**.
     *
     * To allow reordering the column name and the localizable part, the `filterMenuLogicDropDownLabel` accepts a string with a
     * placeholder for the column name, for example, **filter logic for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **filter logic for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterMenuLogicDropDownLabel: string;
    /**
     * The label of the filter cell operators DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Filter cell operators for Product Name**.
     *
     * To allow reordering the column name and the localizable part, the `filterCellOperatorLabel` accepts a string with a
     * placeholder for the column name, for example, **Filter operators for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **Filter operators for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterCellOperatorLabel: string;
    /**
     * The label of the boolean filter cell DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Boolean filter cell for Product Name**.
     *
     * To allow reordering the column name and the localizable part, the `booleanFilterCellLabel` accepts a string with a
     * placeholder for the column name, for example, **Boolean Filter operator for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **Boolean Filter operator for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    booleanFilterCellLabel: string;
    /**
     * The text of the `Equal` (**Is equal to**) filter operator.
     */
    filterEqOperator: string;
    /**
     * The text of the `NotEqual` (**Is not equal to**) filter operator.
     */
    filterNotEqOperator: string;
    /**
     * The text of the `IsNull` (**Is null**) filter operator.
     */
    filterIsNullOperator: string;
    /**
     * The text of the `IsNotNull` (**Is not null**) filter operator.
     */
    filterIsNotNullOperator: string;
    /**
     * The text of the `IsEmpty` (**Is empty**) filter operator.
     */
    filterIsEmptyOperator: string;
    /**
     * The text of the `IsNotEmpty` (**Is not empty**) filter operator.
     */
    filterIsNotEmptyOperator: string;
    /**
     * The text of the `StartsWith` (**Starts with**) filter operator.
     */
    filterStartsWithOperator: string;
    /**
     * The text of the `Contains` (**Contains**) filter operator.
     */
    filterContainsOperator: string;
    /**
     * The text of the `DoesNotContain` (**Does not contain**) filter operator.
     */
    filterNotContainsOperator: string;
    /**
     * The text of the `EndsWith` (**Ends with**) string filter operator.
     */
    filterEndsWithOperator: string;
    /**
     * The text of the `GreaterOrEqualTo` (**Is greater than or equal to**) numeric filter operator.
     */
    filterGteOperator: string;
    /**
     * The text of the `Greater` (**Is greater than**) numeric filter operator.
     */
    filterGtOperator: string;
    /**
     * The text of the `LessOrEqualTo` (**Is less than or equal to**) numeric filter operator.
     */
    filterLteOperator: string;
    /**
     * The text of the `Less` (**Is less than**) numeric filter operator.
     */
    filterLtOperator: string;
    /**
     * The text of the `IsTrue` Boolean filter option.
     */
    filterIsTrue: string;
    /**
     * The text of the `IsFalse` Boolean filter option.
     */
    filterIsFalse: string;
    /**
     * The text of the `(All)` option for Boolean filter.
     */
    filterBooleanAll: string;
    /**
     * The text of the `AfterOrEqualTo` (**Is after or equal to**) date filter operator.
     */
    filterAfterOrEqualOperator: string;
    /**
     * The text of the `After` (**Is after**) date filter operator.
     */
    filterAfterOperator: string;
    /**
     * The text of the `Before` (**Is before**) date filter operator.
     */
    filterBeforeOperator: string;
    /**
     * The text of the `BeforeOrEqualTo` (**Is before or equal to**) date filter operator.
     */
    filterBeforeOrEqualOperator: string;
    /**
     * The text of the **Filter** button.
     */
    filterFilterButton: string;
    /**
     * The text of the **Clear filter** button.
     */
    filterClearButton: string;
    /**
     * The text of the `And` filter logic.
     */
    filterAndLogic: string;
    /**
     * The text of the `Or` filter logic.
     */
    filterOrLogic: string;
    /**
     * The loading text. The `loading` property is part of the accessibility support of the Grid.
     * Its value is detectable by screen readers and is not otherwise visible.
     */
    loading: string;
    /**
     * The text of the `aria-label` attribute placed on the Grid focusable element.
     */
    gridLabel: string;
    /**
     * The title of the column menu icon.
     *
     * The title consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default title will be **Product Name Column Menu**.
     *
     * To allow reordering the column name and the localizable part, the `columnMenu` accepts a string with a
     * placeholder for the column name, for example, **menu for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting title will be rendered as **menu for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    columnMenu: string;
    /**
     * The text that is displayed in the column menu for the set column position item.
     */
    setColumnPosition: string;
    /**
     * The text that is displayed in the column menu for the column items.
     */
    columns: string;
    /**
     * The text that is displayed in the column menu for the lock item.
     */
    lock: string;
    /**
     * The text that is displayed in the column menu for the unlock item.
     */
    unlock: string;
    /**
     * The text that is displayed in the column menu for the stick item.
     */
    stick: string;
    /**
     * The text that is displayed in the column menu for the unstick item.
     */
    unstick: string;
    /**
     * The label of the sort icon.
     */
    sortable: string;
    /**
     * The text that is displayed in the column menu for the ascending sort item.
     */
    sortAscending: string;
    /**
     * The text that is displayed in the column menu for the descending sort item.
     */
    sortDescending: string;
    /**
     * The text shown in the column menu for the autosize this column item.
     */
    autosizeThisColumn: string;
    /**
     * The text shown in the column menu for the autosize all columns item.
     */
    autosizeAllColumns: string;
    /**
     * The title of the Group Chip indicating the ascending sorting order of the groups.
     */
    sortedAscending: string;
    /**
     * The title of the Group Chip indicating the descending sorting order of the groups
     */
    sortedDescending: string;
    /**
     * The status announcement when a column is no longer sorted.
     */
    sortedDefault: string;
    /**
     * The text that is displayed in the column menu or in the column chooser item
     * for the **Apply** button of the columns.
     */
    columnsApply: string;
    /**
     * The text that is displayed in the column menu or in the column chooser item
     * for the **Reset** button of the columns.
     */
    columnsReset: string;
    /**
     * The title of the expand icon of detail rows.
     */
    detailExpand: string;
    /**
     * The title of the collapse icon of detail rows.
     */
    detailCollapse: string;
    /**
     * The text of the Today button of the Date filter.
     */
    filterDateToday: string;
    /**
     * The title of the Toggle button of the Date filter.
     */
    filterDateToggle: string;
    /**
     * The title of the Decrement button of the Numeric filter.
     */
    filterNumericDecrement: string;
    /**
     * The title of the Increment button of the Numeric filter.
     */
    filterNumericIncrement: string;
    /**
     * The labels of the checkbox column checkboxes.
     */
    selectionCheckboxLabel: string;
    /**
     * The label of the checkbox column select all checkbox.
     */
    selectAllCheckboxLabel: string;
    /**
     * The text of the title and `aria-label` attributes applied to the collapse icon of group rows.
     */
    groupCollapse: string;
    /**
     * The text of the title and `aria-label` attributes applied to the expand icon of group rows.
     */
    groupExpand: string;
    /**
     * The label for the top toolbar.
     */
    topToolbarLabel: string;
    /**
     * The label for the bottom toolbar.
     */
    bottomToolbarLabel: string;
    /**
     * The label for the group panel toolbar.
     */
    groupPanelLabel: string;
    /**
     * The label for the Grid drag row handle.
     */
    dragRowHandleLabel: string;
    /**
     * The title for the column menu Filter tab.
     */
    columnMenuFilterTabTitle: string;
    /**
     * The title for the column menu General tab.
     */
    columnMenuGeneralTabTitle: string;
    /**
     * The title for the column menu Columns tab.
     */
    columnMenuColumnsTabTitle: string;
    /**
     * The text for the Group pane Chip Menu Move as previous item.
     */
    groupChipMenuPrevious: string;
    /**
     * The text for the Group pane Chip Menu Move as next item.
     */
    groupChipMenuNext: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<GridMessages, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<GridMessages, "kendo-grid-messages-base", never, { "groupPanelEmpty": { "alias": "groupPanelEmpty"; "required": false; }; "noRecords": { "alias": "noRecords"; "required": false; }; "pagerLabel": { "alias": "pagerLabel"; "required": false; }; "pagerFirstPage": { "alias": "pagerFirstPage"; "required": false; }; "pagerLastPage": { "alias": "pagerLastPage"; "required": false; }; "pagerPreviousPage": { "alias": "pagerPreviousPage"; "required": false; }; "pagerNextPage": { "alias": "pagerNextPage"; "required": false; }; "pagerPage": { "alias": "pagerPage"; "required": false; }; "pagerItemsPerPage": { "alias": "pagerItemsPerPage"; "required": false; }; "pagerOf": { "alias": "pagerOf"; "required": false; }; "pagerItems": { "alias": "pagerItems"; "required": false; }; "pagerPageNumberInputTitle": { "alias": "pagerPageNumberInputTitle"; "required": false; }; "pagerInputLabel": { "alias": "pagerInputLabel"; "required": false; }; "pagerSelectPage": { "alias": "pagerSelectPage"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "filterInputLabel": { "alias": "filterInputLabel"; "required": false; }; "filterMenuTitle": { "alias": "filterMenuTitle"; "required": false; }; "filterMenuOperatorsDropDownLabel": { "alias": "filterMenuOperatorsDropDownLabel"; "required": false; }; "filterMenuLogicDropDownLabel": { "alias": "filterMenuLogicDropDownLabel"; "required": false; }; "filterCellOperatorLabel": { "alias": "filterCellOperatorLabel"; "required": false; }; "booleanFilterCellLabel": { "alias": "booleanFilterCellLabel"; "required": false; }; "filterEqOperator": { "alias": "filterEqOperator"; "required": false; }; "filterNotEqOperator": { "alias": "filterNotEqOperator"; "required": false; }; "filterIsNullOperator": { "alias": "filterIsNullOperator"; "required": false; }; "filterIsNotNullOperator": { "alias": "filterIsNotNullOperator"; "required": false; }; "filterIsEmptyOperator": { "alias": "filterIsEmptyOperator"; "required": false; }; "filterIsNotEmptyOperator": { "alias": "filterIsNotEmptyOperator"; "required": false; }; "filterStartsWithOperator": { "alias": "filterStartsWithOperator"; "required": false; }; "filterContainsOperator": { "alias": "filterContainsOperator"; "required": false; }; "filterNotContainsOperator": { "alias": "filterNotContainsOperator"; "required": false; }; "filterEndsWithOperator": { "alias": "filterEndsWithOperator"; "required": false; }; "filterGteOperator": { "alias": "filterGteOperator"; "required": false; }; "filterGtOperator": { "alias": "filterGtOperator"; "required": false; }; "filterLteOperator": { "alias": "filterLteOperator"; "required": false; }; "filterLtOperator": { "alias": "filterLtOperator"; "required": false; }; "filterIsTrue": { "alias": "filterIsTrue"; "required": false; }; "filterIsFalse": { "alias": "filterIsFalse"; "required": false; }; "filterBooleanAll": { "alias": "filterBooleanAll"; "required": false; }; "filterAfterOrEqualOperator": { "alias": "filterAfterOrEqualOperator"; "required": false; }; "filterAfterOperator": { "alias": "filterAfterOperator"; "required": false; }; "filterBeforeOperator": { "alias": "filterBeforeOperator"; "required": false; }; "filterBeforeOrEqualOperator": { "alias": "filterBeforeOrEqualOperator"; "required": false; }; "filterFilterButton": { "alias": "filterFilterButton"; "required": false; }; "filterClearButton": { "alias": "filterClearButton"; "required": false; }; "filterAndLogic": { "alias": "filterAndLogic"; "required": false; }; "filterOrLogic": { "alias": "filterOrLogic"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "gridLabel": { "alias": "gridLabel"; "required": false; }; "columnMenu": { "alias": "columnMenu"; "required": false; }; "setColumnPosition": { "alias": "setColumnPosition"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "lock": { "alias": "lock"; "required": false; }; "unlock": { "alias": "unlock"; "required": false; }; "stick": { "alias": "stick"; "required": false; }; "unstick": { "alias": "unstick"; "required": false; }; "sortable": { "alias": "sortable"; "required": false; }; "sortAscending": { "alias": "sortAscending"; "required": false; }; "sortDescending": { "alias": "sortDescending"; "required": false; }; "autosizeThisColumn": { "alias": "autosizeThisColumn"; "required": false; }; "autosizeAllColumns": { "alias": "autosizeAllColumns"; "required": false; }; "sortedAscending": { "alias": "sortedAscending"; "required": false; }; "sortedDescending": { "alias": "sortedDescending"; "required": false; }; "sortedDefault": { "alias": "sortedDefault"; "required": false; }; "columnsApply": { "alias": "columnsApply"; "required": false; }; "columnsReset": { "alias": "columnsReset"; "required": false; }; "detailExpand": { "alias": "detailExpand"; "required": false; }; "detailCollapse": { "alias": "detailCollapse"; "required": false; }; "filterDateToday": { "alias": "filterDateToday"; "required": false; }; "filterDateToggle": { "alias": "filterDateToggle"; "required": false; }; "filterNumericDecrement": { "alias": "filterNumericDecrement"; "required": false; }; "filterNumericIncrement": { "alias": "filterNumericIncrement"; "required": false; }; "selectionCheckboxLabel": { "alias": "selectionCheckboxLabel"; "required": false; }; "selectAllCheckboxLabel": { "alias": "selectAllCheckboxLabel"; "required": false; }; "groupCollapse": { "alias": "groupCollapse"; "required": false; }; "groupExpand": { "alias": "groupExpand"; "required": false; }; "topToolbarLabel": { "alias": "topToolbarLabel"; "required": false; }; "bottomToolbarLabel": { "alias": "bottomToolbarLabel"; "required": false; }; "groupPanelLabel": { "alias": "groupPanelLabel"; "required": false; }; "dragRowHandleLabel": { "alias": "dragRowHandleLabel"; "required": false; }; "columnMenuFilterTabTitle": { "alias": "columnMenuFilterTabTitle"; "required": false; }; "columnMenuGeneralTabTitle": { "alias": "columnMenuGeneralTabTitle"; "required": false; }; "columnMenuColumnsTabTitle": { "alias": "columnMenuColumnsTabTitle"; "required": false; }; "groupChipMenuPrevious": { "alias": "groupChipMenuPrevious"; "required": false; }; "groupChipMenuNext": { "alias": "groupChipMenuNext"; "required": false; }; }, {}, never, never, false, never>;
}
