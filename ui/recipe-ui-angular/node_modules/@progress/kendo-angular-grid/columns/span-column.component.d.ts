/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, QueryList } from '@angular/core';
import { CellTemplateDirective } from '../rendering/cell-template.directive';
import { EditTemplateDirective } from '../editing/edit-template.directive';
import { ColumnBase } from './column-base';
import { ColumnComponent } from "./column.component";
import { IdService } from '../common/id.service';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare function isSpanColumnComponent(column: any): column is SpanColumnComponent;
/**
 * Represents a column which can be spanned over multiple data cells while the individual
 * header and footer cells are retained ([see example]({% slug spanned_columns_grid %})).
 * Enables you to achieve more flexible layout while keeping the built-in UI element for
 * [sorting]({% slug sorting_grid %}), [filtering]({% slug filtering_grid %}), and
 * [grouping]({% slug grouping_grid %}). Wrap the columns that will be
 * merged inside the `<kendo-grid-span-column>` tag.
 *
 * ```html
 * <kendo-grid-span-column>
 *   <kendo-grid-column field="field1"></kendo-grid-column>
 *   <kendo-grid-column field="field2"></kendo-grid-column>
 *   <ng-template kendoGridCellTemplate let-dataItem>
 *     <h5>{{ dataItem.field1 }}</h5>
 *     <p>{{ dataItem.field2 }}</p>
 *   </ng-template>
 * </kendo-grid-span-column>
 * ```
 */
export declare class SpanColumnComponent extends ColumnBase {
    readonly isSpanColumn: boolean;
    template: QueryList<CellTemplateDirective>;
    editTemplate: QueryList<EditTemplateDirective>;
    /**
     * @hidden
     */
    childColumns: QueryList<ColumnComponent>;
    /**
     * @hidden
     */
    title: string;
    /**
     * @hidden
     */
    headerStyle: {
        [key: string]: string;
    };
    /**
     * @hidden
     */
    footerStyle: {
        [key: string]: string;
    };
    /**
     * @hidden
     */
    headerClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    /**
     * @hidden
     */
    footerClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    /**
     * @hidden
     */
    includeInChooser: boolean;
    /**
     * Defines whether the edit template of the column will be rendered.
     * To enable the editing functionality for a spanned column, set an edit template for it ([see example](slug:custom_reactive_editing_grid)).
     * @default false
     */
    set editable(value: boolean);
    get editable(): boolean;
    /**
     * @hidden
     * added for backwards compitability
     */
    set width(_value: number);
    get width(): number;
    /**
     * @hidden
     */
    get leafIndex(): number;
    private _editable;
    constructor(parent?: ColumnBase, idService?: IdService);
    /**
     * @hidden
     */
    get templateRef(): TemplateRef<any>;
    /**
     * @hidden
     */
    get editTemplateRef(): TemplateRef<any>;
    /**
     * @hidden
     */
    get colspan(): number;
    /**
     * Toggles the locked (frozen) state of the columns ([see example](slug:locked_columns_grid)).
     * @default false
     */
    set locked(value: boolean);
    get locked(): boolean;
    get childrenArray(): any[];
    get hasChildren(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SpanColumnComponent, [{ optional: true; host: true; skipSelf: true; }, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SpanColumnComponent, "kendo-grid-span-column", never, { "editable": { "alias": "editable"; "required": false; }; "locked": { "alias": "locked"; "required": false; }; }, {}, ["template", "editTemplate", "childColumns"], never, true, never>;
}
