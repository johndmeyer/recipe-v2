/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { FilterDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { ColumnComponent } from "../../columns/column.component";
import { FilterService } from '../filter.service';
import { MenuTabbingService } from './menu-tabbing.service';
import { ContextService } from '../../common/provider.service';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class NumericFilterMenuInputComponent {
    private ctx;
    operators: Array<{
        text: string;
        value: string;
    }>;
    column: ColumnComponent;
    filter: CompositeFilterDescriptor;
    operator: string;
    currentFilter: FilterDescriptor;
    filterService: FilterService;
    filterDelay: number;
    isFirstDropDown: boolean;
    menuTabbingService: MenuTabbingService;
    /**
     * Specifies the value which is used to increment or decrement the component value.
     * @type {numeric}
     */
    step: number;
    /**
     * Specifies the smallest value that is valid.
     * @type {number}
     */
    min: number;
    /**
     * Specifies the greatest value that is valid.
     * @type {number}
     */
    max: number;
    /**
     * Specifies whether the **Up** and **Down** spin buttons will be rendered.
     * @type {boolean}
     */
    spinners: boolean;
    /**
     * Specifies the number precision tat is applied to the component value when it is focused.
     * If the user enters a number with a greater precision than is currently configured, the component value is rounded.
     *
     * @type {number}
     */
    decimals: number;
    /**
     * Specifies the number format that is used when the component is not focused.
     * By default, the `column.format` value is used (if set).
     */
    format: string;
    /**
     * The placeholder text for the filter input.
     * @type {string}
     */
    placeholder: string;
    constructor(ctx: ContextService);
    messageFor(key: string): string;
    /**
     * @hidden
     */
    get columnLabel(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NumericFilterMenuInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NumericFilterMenuInputComponent, "kendo-grid-numeric-filter-menu-input", never, { "operators": { "alias": "operators"; "required": false; }; "column": { "alias": "column"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "operator": { "alias": "operator"; "required": false; }; "currentFilter": { "alias": "currentFilter"; "required": false; }; "filterService": { "alias": "filterService"; "required": false; }; "filterDelay": { "alias": "filterDelay"; "required": false; }; "isFirstDropDown": { "alias": "isFirstDropDown"; "required": false; }; "menuTabbingService": { "alias": "menuTabbingService"; "required": false; }; "step": { "alias": "step"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "spinners": { "alias": "spinners"; "required": false; }; "decimals": { "alias": "decimals"; "required": false; }; "format": { "alias": "format"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; }, {}, never, never, true, never>;
}
