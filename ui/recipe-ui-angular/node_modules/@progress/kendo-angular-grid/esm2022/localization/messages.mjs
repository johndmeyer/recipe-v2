/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, Input } from '@angular/core';
import { ComponentMessages } from '@progress/kendo-angular-l10n';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class GridMessages extends ComponentMessages {
    /**
     * The text for the empty group panel.
     */
    groupPanelEmpty;
    /**
     * The no-records text.
     */
    noRecords;
    /**
     * The label of the pager. Follows the pattern **Page {currentPage} of {totalPages}** by default.
     * Тhe default label text when the current page is 1, and the total number of pages is 10 will be
     * **Page navigation, page 1 of 10**.
     *
     * The message consists of several parts - the current page number, the total number of pages, and a localizable string.
     * To allow for reordering its parts, the `pagerLabel` input accepts a string with placeholders for the current page
     * and total number of pages. The `{currentPage}` and `{totalPages}` placeholders will be replaced
     * internally with the respective actual values. [See example](slug:globalization_grid#toc-custom-messages).
     */
    pagerLabel;
    /**
     * The label for the **First page** button.
     */
    pagerFirstPage;
    /**
     * The label for the **Last page** button.
     */
    pagerLastPage;
    /**
     * The label for the **Previous page** button.
     */
    pagerPreviousPage;
    /**
     * The label for the **Next page** button.
     */
    pagerNextPage;
    /**
     * The text displayed before the pager input.
     */
    pagerPage;
    /**
     * The text displayed after the page-size selector.
     */
    pagerItemsPerPage;
    /**
     * The text displayed before the total-page number.
     */
    pagerOf;
    /**
     * The text displayed after the total number of items.
     */
    pagerItems;
    /**
     * The title attribute of the page number input element.
     */
    pagerPageNumberInputTitle;
    /**
     * The text of the aria-label attribute applied to the page number input element.
     */
    pagerInputLabel;
    /**
     * The text of the title and `aria-label` attributes applied to the page chooser in the Grid Pager.
     */
    pagerSelectPage;
    /**
     * The label of the filter cell or icon.
     */
    filter;
    /**
     * The label of the filter input.
     *
     * The filter input label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Product Name Filter**.
     *
     * To allow reordering the column name and the localizable part, the `filterInputLabel` accepts a string with a
     * placeholder for the column name, for example, **filter for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **filter for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterInputLabel;
    /**
     * The title of the filter menu icon.
     *
     * The title consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default title will be **Product Name Filter Menu**.
     *
     * To allow reordering the column name and the localizable part, the `filterMenuTitle` accepts a string with a
     * placeholder for the column name, for example, **filter for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting title will be rendered as **filter for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterMenuTitle;
    /**
     * The label of the filter menu operators DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Product Name Filter Menu Operators**.
     *
     * To allow reordering the column name and the localizable part, the `filterMenuOperatorsDropDownLabel` accepts a string with a
     * placeholder for the column name, for example, **filter operators for {columnName**'. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **filter operators for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterMenuOperatorsDropDownLabel;
    /**
     * The label of the filter menu logic DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Product Name Filter Menu Logic**.
     *
     * To allow reordering the column name and the localizable part, the `filterMenuLogicDropDownLabel` accepts a string with a
     * placeholder for the column name, for example, **filter logic for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **filter logic for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterMenuLogicDropDownLabel;
    /**
     * The label of the filter cell operators DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Filter cell operators for Product Name**.
     *
     * To allow reordering the column name and the localizable part, the `filterCellOperatorLabel` accepts a string with a
     * placeholder for the column name, for example, **Filter operators for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **Filter operators for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    filterCellOperatorLabel;
    /**
     * The label of the boolean filter cell DropDownList.
     *
     * The label consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default label will be **Boolean filter cell for Product Name**.
     *
     * To allow reordering the column name and the localizable part, the `booleanFilterCellLabel` accepts a string with a
     * placeholder for the column name, for example, **Boolean Filter operator for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting label will be rendered as **Boolean Filter operator for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    booleanFilterCellLabel;
    /**
     * The text of the `Equal` (**Is equal to**) filter operator.
     */
    filterEqOperator;
    /**
     * The text of the `NotEqual` (**Is not equal to**) filter operator.
     */
    filterNotEqOperator;
    /**
     * The text of the `IsNull` (**Is null**) filter operator.
     */
    filterIsNullOperator;
    /**
     * The text of the `IsNotNull` (**Is not null**) filter operator.
     */
    filterIsNotNullOperator;
    /**
     * The text of the `IsEmpty` (**Is empty**) filter operator.
     */
    filterIsEmptyOperator;
    /**
     * The text of the `IsNotEmpty` (**Is not empty**) filter operator.
     */
    filterIsNotEmptyOperator;
    /**
     * The text of the `StartsWith` (**Starts with**) filter operator.
     */
    filterStartsWithOperator;
    /**
     * The text of the `Contains` (**Contains**) filter operator.
     */
    filterContainsOperator;
    /**
     * The text of the `DoesNotContain` (**Does not contain**) filter operator.
     */
    filterNotContainsOperator;
    /**
     * The text of the `EndsWith` (**Ends with**) string filter operator.
     */
    filterEndsWithOperator;
    /**
     * The text of the `GreaterOrEqualTo` (**Is greater than or equal to**) numeric filter operator.
     */
    filterGteOperator;
    /**
     * The text of the `Greater` (**Is greater than**) numeric filter operator.
     */
    filterGtOperator;
    /**
     * The text of the `LessOrEqualTo` (**Is less than or equal to**) numeric filter operator.
     */
    filterLteOperator;
    /**
     * The text of the `Less` (**Is less than**) numeric filter operator.
     */
    filterLtOperator;
    /**
     * The text of the `IsTrue` Boolean filter option.
     */
    filterIsTrue;
    /**
     * The text of the `IsFalse` Boolean filter option.
     */
    filterIsFalse;
    /**
     * The text of the `(All)` option for Boolean filter.
     */
    filterBooleanAll;
    /**
     * The text of the `AfterOrEqualTo` (**Is after or equal to**) date filter operator.
     */
    filterAfterOrEqualOperator;
    /**
     * The text of the `After` (**Is after**) date filter operator.
     */
    filterAfterOperator;
    /**
     * The text of the `Before` (**Is before**) date filter operator.
     */
    filterBeforeOperator;
    /**
     * The text of the `BeforeOrEqualTo` (**Is before or equal to**) date filter operator.
     */
    filterBeforeOrEqualOperator;
    /**
     * The text of the **Filter** button.
     */
    filterFilterButton;
    /**
     * The text of the **Clear filter** button.
     */
    filterClearButton;
    /**
     * The text of the `And` filter logic.
     */
    filterAndLogic;
    /**
     * The text of the `Or` filter logic.
     */
    filterOrLogic;
    /**
     * The loading text. The `loading` property is part of the accessibility support of the Grid.
     * Its value is detectable by screen readers and is not otherwise visible.
     */
    loading;
    /**
     * The text of the `aria-label` attribute placed on the Grid focusable element.
     */
    gridLabel;
    /**
     * The title of the column menu icon.
     *
     * The title consists of a two-part message - the name of the column and a localizable string.
     * For a column named **Product Name**, the default title will be **Product Name Column Menu**.
     *
     * To allow reordering the column name and the localizable part, the `columnMenu` accepts a string with a
     * placeholder for the column name, for example, **menu for {columnName}**. The `{columnName}` placeholder will be replaced
     * internally with the current column name, and the resulting title will be rendered as **menu for Product Name**.
     * [See example](slug:globalization_grid#toc-custom-messages).
     */
    columnMenu;
    /**
     * The text that is displayed in the column menu for the set column position item.
     */
    setColumnPosition;
    /**
     * The text that is displayed in the column menu for the column items.
     */
    columns;
    /**
     * The text that is displayed in the column menu for the lock item.
     */
    lock;
    /**
     * The text that is displayed in the column menu for the unlock item.
     */
    unlock;
    /**
     * The text that is displayed in the column menu for the stick item.
     */
    stick;
    /**
     * The text that is displayed in the column menu for the unstick item.
     */
    unstick;
    /**
     * The label of the sort icon.
     */
    sortable;
    /**
     * The text that is displayed in the column menu for the ascending sort item.
     */
    sortAscending;
    /**
     * The text that is displayed in the column menu for the descending sort item.
     */
    sortDescending;
    /**
     * The text shown in the column menu for the autosize this column item.
     */
    autosizeThisColumn;
    /**
     * The text shown in the column menu for the autosize all columns item.
     */
    autosizeAllColumns;
    /**
     * The title of the Group Chip indicating the ascending sorting order of the groups.
     */
    sortedAscending;
    /**
     * The title of the Group Chip indicating the descending sorting order of the groups
     */
    sortedDescending;
    /**
     * The status announcement when a column is no longer sorted.
     */
    sortedDefault;
    /**
     * The text that is displayed in the column menu or in the column chooser item
     * for the **Apply** button of the columns.
     */
    columnsApply;
    /**
     * The text that is displayed in the column menu or in the column chooser item
     * for the **Reset** button of the columns.
     */
    columnsReset;
    /**
     * The title of the expand icon of detail rows.
     */
    detailExpand;
    /**
     * The title of the collapse icon of detail rows.
     */
    detailCollapse;
    /**
     * The text of the Today button of the Date filter.
     */
    filterDateToday;
    /**
     * The title of the Toggle button of the Date filter.
     */
    filterDateToggle;
    /**
     * The title of the Decrement button of the Numeric filter.
     */
    filterNumericDecrement;
    /**
     * The title of the Increment button of the Numeric filter.
     */
    filterNumericIncrement;
    /**
     * The labels of the checkbox column checkboxes.
     */
    selectionCheckboxLabel;
    /**
     * The label of the checkbox column select all checkbox.
     */
    selectAllCheckboxLabel;
    /**
     * The text of the title and `aria-label` attributes applied to the collapse icon of group rows.
     */
    groupCollapse;
    /**
     * The text of the title and `aria-label` attributes applied to the expand icon of group rows.
     */
    groupExpand;
    /**
     * The label for the top toolbar.
     */
    topToolbarLabel;
    /**
     * The label for the bottom toolbar.
     */
    bottomToolbarLabel;
    /**
     * The label for the group panel toolbar.
     */
    groupPanelLabel;
    /**
     * The label for the Grid drag row handle.
     */
    dragRowHandleLabel;
    /**
     * The title for the column menu Filter tab.
     */
    columnMenuFilterTabTitle;
    /**
     * The title for the column menu General tab.
     */
    columnMenuGeneralTabTitle;
    /**
     * The title for the column menu Columns tab.
     */
    columnMenuColumnsTabTitle;
    /**
     * The text for the Group pane Chip Menu Move as previous item.
     */
    groupChipMenuPrevious;
    /**
     * The text for the Group pane Chip Menu Move as next item.
     */
    groupChipMenuNext;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GridMessages, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: GridMessages, selector: "kendo-grid-messages-base", inputs: { groupPanelEmpty: "groupPanelEmpty", noRecords: "noRecords", pagerLabel: "pagerLabel", pagerFirstPage: "pagerFirstPage", pagerLastPage: "pagerLastPage", pagerPreviousPage: "pagerPreviousPage", pagerNextPage: "pagerNextPage", pagerPage: "pagerPage", pagerItemsPerPage: "pagerItemsPerPage", pagerOf: "pagerOf", pagerItems: "pagerItems", pagerPageNumberInputTitle: "pagerPageNumberInputTitle", pagerInputLabel: "pagerInputLabel", pagerSelectPage: "pagerSelectPage", filter: "filter", filterInputLabel: "filterInputLabel", filterMenuTitle: "filterMenuTitle", filterMenuOperatorsDropDownLabel: "filterMenuOperatorsDropDownLabel", filterMenuLogicDropDownLabel: "filterMenuLogicDropDownLabel", filterCellOperatorLabel: "filterCellOperatorLabel", booleanFilterCellLabel: "booleanFilterCellLabel", filterEqOperator: "filterEqOperator", filterNotEqOperator: "filterNotEqOperator", filterIsNullOperator: "filterIsNullOperator", filterIsNotNullOperator: "filterIsNotNullOperator", filterIsEmptyOperator: "filterIsEmptyOperator", filterIsNotEmptyOperator: "filterIsNotEmptyOperator", filterStartsWithOperator: "filterStartsWithOperator", filterContainsOperator: "filterContainsOperator", filterNotContainsOperator: "filterNotContainsOperator", filterEndsWithOperator: "filterEndsWithOperator", filterGteOperator: "filterGteOperator", filterGtOperator: "filterGtOperator", filterLteOperator: "filterLteOperator", filterLtOperator: "filterLtOperator", filterIsTrue: "filterIsTrue", filterIsFalse: "filterIsFalse", filterBooleanAll: "filterBooleanAll", filterAfterOrEqualOperator: "filterAfterOrEqualOperator", filterAfterOperator: "filterAfterOperator", filterBeforeOperator: "filterBeforeOperator", filterBeforeOrEqualOperator: "filterBeforeOrEqualOperator", filterFilterButton: "filterFilterButton", filterClearButton: "filterClearButton", filterAndLogic: "filterAndLogic", filterOrLogic: "filterOrLogic", loading: "loading", gridLabel: "gridLabel", columnMenu: "columnMenu", setColumnPosition: "setColumnPosition", columns: "columns", lock: "lock", unlock: "unlock", stick: "stick", unstick: "unstick", sortable: "sortable", sortAscending: "sortAscending", sortDescending: "sortDescending", autosizeThisColumn: "autosizeThisColumn", autosizeAllColumns: "autosizeAllColumns", sortedAscending: "sortedAscending", sortedDescending: "sortedDescending", sortedDefault: "sortedDefault", columnsApply: "columnsApply", columnsReset: "columnsReset", detailExpand: "detailExpand", detailCollapse: "detailCollapse", filterDateToday: "filterDateToday", filterDateToggle: "filterDateToggle", filterNumericDecrement: "filterNumericDecrement", filterNumericIncrement: "filterNumericIncrement", selectionCheckboxLabel: "selectionCheckboxLabel", selectAllCheckboxLabel: "selectAllCheckboxLabel", groupCollapse: "groupCollapse", groupExpand: "groupExpand", topToolbarLabel: "topToolbarLabel", bottomToolbarLabel: "bottomToolbarLabel", groupPanelLabel: "groupPanelLabel", dragRowHandleLabel: "dragRowHandleLabel", columnMenuFilterTabTitle: "columnMenuFilterTabTitle", columnMenuGeneralTabTitle: "columnMenuGeneralTabTitle", columnMenuColumnsTabTitle: "columnMenuColumnsTabTitle", groupChipMenuPrevious: "groupChipMenuPrevious", groupChipMenuNext: "groupChipMenuNext" }, usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GridMessages, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'kendo-grid-messages-base'
                }]
        }], propDecorators: { groupPanelEmpty: [{
                type: Input
            }], noRecords: [{
                type: Input
            }], pagerLabel: [{
                type: Input
            }], pagerFirstPage: [{
                type: Input
            }], pagerLastPage: [{
                type: Input
            }], pagerPreviousPage: [{
                type: Input
            }], pagerNextPage: [{
                type: Input
            }], pagerPage: [{
                type: Input
            }], pagerItemsPerPage: [{
                type: Input
            }], pagerOf: [{
                type: Input
            }], pagerItems: [{
                type: Input
            }], pagerPageNumberInputTitle: [{
                type: Input
            }], pagerInputLabel: [{
                type: Input
            }], pagerSelectPage: [{
                type: Input
            }], filter: [{
                type: Input
            }], filterInputLabel: [{
                type: Input
            }], filterMenuTitle: [{
                type: Input
            }], filterMenuOperatorsDropDownLabel: [{
                type: Input
            }], filterMenuLogicDropDownLabel: [{
                type: Input
            }], filterCellOperatorLabel: [{
                type: Input
            }], booleanFilterCellLabel: [{
                type: Input
            }], filterEqOperator: [{
                type: Input
            }], filterNotEqOperator: [{
                type: Input
            }], filterIsNullOperator: [{
                type: Input
            }], filterIsNotNullOperator: [{
                type: Input
            }], filterIsEmptyOperator: [{
                type: Input
            }], filterIsNotEmptyOperator: [{
                type: Input
            }], filterStartsWithOperator: [{
                type: Input
            }], filterContainsOperator: [{
                type: Input
            }], filterNotContainsOperator: [{
                type: Input
            }], filterEndsWithOperator: [{
                type: Input
            }], filterGteOperator: [{
                type: Input
            }], filterGtOperator: [{
                type: Input
            }], filterLteOperator: [{
                type: Input
            }], filterLtOperator: [{
                type: Input
            }], filterIsTrue: [{
                type: Input
            }], filterIsFalse: [{
                type: Input
            }], filterBooleanAll: [{
                type: Input
            }], filterAfterOrEqualOperator: [{
                type: Input
            }], filterAfterOperator: [{
                type: Input
            }], filterBeforeOperator: [{
                type: Input
            }], filterBeforeOrEqualOperator: [{
                type: Input
            }], filterFilterButton: [{
                type: Input
            }], filterClearButton: [{
                type: Input
            }], filterAndLogic: [{
                type: Input
            }], filterOrLogic: [{
                type: Input
            }], loading: [{
                type: Input
            }], gridLabel: [{
                type: Input
            }], columnMenu: [{
                type: Input
            }], setColumnPosition: [{
                type: Input
            }], columns: [{
                type: Input
            }], lock: [{
                type: Input
            }], unlock: [{
                type: Input
            }], stick: [{
                type: Input
            }], unstick: [{
                type: Input
            }], sortable: [{
                type: Input
            }], sortAscending: [{
                type: Input
            }], sortDescending: [{
                type: Input
            }], autosizeThisColumn: [{
                type: Input
            }], autosizeAllColumns: [{
                type: Input
            }], sortedAscending: [{
                type: Input
            }], sortedDescending: [{
                type: Input
            }], sortedDefault: [{
                type: Input
            }], columnsApply: [{
                type: Input
            }], columnsReset: [{
                type: Input
            }], detailExpand: [{
                type: Input
            }], detailCollapse: [{
                type: Input
            }], filterDateToday: [{
                type: Input
            }], filterDateToggle: [{
                type: Input
            }], filterNumericDecrement: [{
                type: Input
            }], filterNumericIncrement: [{
                type: Input
            }], selectionCheckboxLabel: [{
                type: Input
            }], selectAllCheckboxLabel: [{
                type: Input
            }], groupCollapse: [{
                type: Input
            }], groupExpand: [{
                type: Input
            }], topToolbarLabel: [{
                type: Input
            }], bottomToolbarLabel: [{
                type: Input
            }], groupPanelLabel: [{
                type: Input
            }], dragRowHandleLabel: [{
                type: Input
            }], columnMenuFilterTabTitle: [{
                type: Input
            }], columnMenuGeneralTabTitle: [{
                type: Input
            }], columnMenuColumnsTabTitle: [{
                type: Input
            }], groupChipMenuPrevious: [{
                type: Input
            }], groupChipMenuNext: [{
                type: Input
            }] } });
