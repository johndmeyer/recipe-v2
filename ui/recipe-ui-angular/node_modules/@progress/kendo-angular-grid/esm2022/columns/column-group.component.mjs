/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, forwardRef, SkipSelf, Host, Optional, QueryList, ContentChildren } from '@angular/core';
import { IdService } from '../common/id.service';
import { ColumnBase } from './column-base';
import { columnsSpan } from './column-common';
import { ColumnConfigurationErrorMessages } from '../common/error-messages';
import * as i0 from "@angular/core";
import * as i1 from "./column-base";
import * as i2 from "../common/id.service";
/**
 * @hidden
 */
export function isColumnGroupComponent(column) {
    return column.isColumnGroup;
}
/**
 * Represents the column group header of the Grid
 * ([more information and examples](slug:multicolumnheaders_columns_grid)).
 *
 * @example
 * ```html
 * <kendo-grid [data]="gridData">
 *   <kendo-grid-column-group title="Product Info">
 *     <kendo-grid-column field="ProductID"></kendo-grid-column>
 *     <kendo-grid-column field="ProductName"></kendo-grid-column>
 *   </kendo-grid-column-group>
 *   <kendo-grid-column field="UnitPrice"></kendo-grid-column>
 * </kendo-grid>
 * ```
 */
export class ColumnGroupComponent extends ColumnBase {
    parent;
    /**
     * @hidden
     */
    includeInChooser = false;
    /**
     * @hidden
     */
    isColumnGroup = true;
    /**
     * @hidden
     */
    minResizableWidth = 10;
    /**
     * @hidden
     */
    maxResizableWidth;
    /**
     * @hidden
     */
    children;
    constructor(parent, idService) {
        super(parent, idService);
        this.parent = parent;
        if (parent && parent.isSpanColumn) {
            throw new Error(ColumnConfigurationErrorMessages.nestedInside('ColumnGroupComponent', 'SpanColumnComponent'));
        }
    }
    /**
     * @hidden
     */
    rowspan() {
        return 1;
    }
    /**
     * @hidden
     */
    get colspan() {
        if (!this.children) {
            return 1;
        }
        return columnsSpan(this.children
            .filter(child => child !== this && child.isVisible));
    }
    /**
     * @hidden
     */
    get leafIndex() {
        return this.children ? (this.firstChild || {}).leafIndex : -1;
    }
    get childrenArray() {
        return this.children.filter(c => c !== this);
    }
    get hasChildren() {
        return Boolean(this.firstChild);
    }
    get firstChild() {
        return this.children.find(column => column !== this);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ColumnGroupComponent, deps: [{ token: i1.ColumnBase, host: true, optional: true, skipSelf: true }, { token: i2.IdService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ColumnGroupComponent, isStandalone: true, selector: "kendo-grid-column-group", providers: [
            {
                provide: ColumnBase,
                useExisting: forwardRef(() => ColumnGroupComponent)
            }
        ], queries: [{ propertyName: "children", predicate: ColumnBase }], usesInheritance: true, ngImport: i0, template: ``, isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ColumnGroupComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [
                        {
                            provide: ColumnBase,
                            useExisting: forwardRef(() => ColumnGroupComponent)
                        }
                    ],
                    selector: 'kendo-grid-column-group',
                    template: ``,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ColumnBase, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }, {
                    type: Optional
                }] }, { type: i2.IdService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [ColumnBase]
            }] } });
