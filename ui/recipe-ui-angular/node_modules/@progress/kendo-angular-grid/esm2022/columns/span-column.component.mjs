/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { forwardRef, Component, SkipSelf, Host, Optional, QueryList, ContentChildren, Input } from '@angular/core';
import { CellTemplateDirective } from '../rendering/cell-template.directive';
import { EditTemplateDirective } from '../editing/edit-template.directive';
import { ColumnBase } from './column-base';
import { ColumnComponent } from "./column.component";
import { isPresent } from "../utils";
import { IdService } from '../common/id.service';
import { ColumnConfigurationErrorMessages } from '../common/error-messages';
import * as i0 from "@angular/core";
import * as i1 from "./column-base";
import * as i2 from "../common/id.service";
/**
 * @hidden
 */
export function isSpanColumnComponent(column) {
    return column.isSpanColumn;
}
/**
 * Represents a column which can be spanned over multiple data cells while the individual
 * header and footer cells are retained ([see example]({% slug spanned_columns_grid %})).
 * Enables you to achieve more flexible layout while keeping the built-in UI element for
 * [sorting]({% slug sorting_grid %}), [filtering]({% slug filtering_grid %}), and
 * [grouping]({% slug grouping_grid %}). Wrap the columns that will be
 * merged inside the `<kendo-grid-span-column>` tag.
 *
 * ```html
 * <kendo-grid-span-column>
 *   <kendo-grid-column field="field1"></kendo-grid-column>
 *   <kendo-grid-column field="field2"></kendo-grid-column>
 *   <ng-template kendoGridCellTemplate let-dataItem>
 *     <h5>{{ dataItem.field1 }}</h5>
 *     <p>{{ dataItem.field2 }}</p>
 *   </ng-template>
 * </kendo-grid-span-column>
 * ```
 */
export class SpanColumnComponent extends ColumnBase {
    /*
     * @hidden
     */
    isSpanColumn = true;
    template = new QueryList();
    editTemplate = new QueryList();
    /**
     * @hidden
     */
    childColumns = new QueryList();
    /**
     * @hidden
     */
    title;
    /**
     * @hidden
     */
    headerStyle;
    /**
     * @hidden
     */
    footerStyle;
    /**
     * @hidden
     */
    headerClass;
    /**
     * @hidden
     */
    footerClass;
    /**
     * @hidden
     */
    includeInChooser = false;
    /**
     * Defines whether the edit template of the column will be rendered.
     * To enable the editing functionality for a spanned column, set an edit template for it ([see example](slug:custom_reactive_editing_grid)).
     * @default false
     */
    set editable(value) {
        this._editable = value;
    }
    get editable() {
        return isPresent(this.editTemplateRef) && this._editable;
    }
    /**
     * @hidden
     * added for backwards compitability
     */
    set width(_value) {
    }
    get width() {
        return this.childColumns.reduce((total, column) => total + column.width, 0);
    }
    /**
     * @hidden
     */
    get leafIndex() {
        return this.childColumns.first.leafIndex;
    }
    _editable = true;
    constructor(parent, idService) {
        super(parent, idService);
        if (parent && parent.isSpanColumn) {
            throw new Error(ColumnConfigurationErrorMessages.nestedInside('SpanColumnComponent', 'SpanColumnComponent'));
        }
    }
    /**
     * @hidden
     */
    get templateRef() {
        const template = this.template.first;
        return template ? template.templateRef : undefined;
    }
    /**
     * @hidden
     */
    get editTemplateRef() {
        const editTemplate = this.editTemplate.first;
        return editTemplate ? editTemplate.templateRef : undefined;
    }
    /**
     * @hidden
     */
    get colspan() {
        return this.childColumns.filter(c => c.isVisible).length;
    }
    /**
     * Toggles the locked (frozen) state of the columns ([see example](slug:locked_columns_grid)).
     * @default false
     */
    set locked(value) {
        this._locked = value;
    }
    get locked() {
        return this._locked || this.childColumns.some(c => c.locked);
    }
    get childrenArray() {
        return this.childColumns.toArray();
    }
    get hasChildren() {
        return this.childColumns.length > 0;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SpanColumnComponent, deps: [{ token: i1.ColumnBase, host: true, optional: true, skipSelf: true }, { token: i2.IdService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: SpanColumnComponent, isStandalone: true, selector: "kendo-grid-span-column", inputs: { editable: "editable", locked: "locked" }, providers: [
            {
                provide: ColumnBase,
                useExisting: forwardRef(() => SpanColumnComponent)
            }
        ], queries: [{ propertyName: "template", predicate: CellTemplateDirective }, { propertyName: "editTemplate", predicate: EditTemplateDirective }, { propertyName: "childColumns", predicate: ColumnComponent }], usesInheritance: true, ngImport: i0, template: ``, isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: SpanColumnComponent, decorators: [{
            type: Component,
            args: [{
                    providers: [
                        {
                            provide: ColumnBase,
                            useExisting: forwardRef(() => SpanColumnComponent)
                        }
                    ],
                    selector: 'kendo-grid-span-column',
                    template: ``,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.ColumnBase, decorators: [{
                    type: SkipSelf
                }, {
                    type: Host
                }, {
                    type: Optional
                }] }, { type: i2.IdService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { template: [{
                type: ContentChildren,
                args: [CellTemplateDirective, { descendants: false }]
            }], editTemplate: [{
                type: ContentChildren,
                args: [EditTemplateDirective, { descendants: false }]
            }], childColumns: [{
                type: ContentChildren,
                args: [ColumnComponent]
            }], editable: [{
                type: Input
            }], locked: [{
                type: Input
            }] } });
