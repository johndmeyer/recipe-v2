/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, Renderer2 } from '@angular/core';
import { SortService } from '../common/sort.service';
import { normalize } from '../columns/sort-settings';
import { ColumnMenuItemBase } from './column-menu-item-base';
import { sortAscSmallIcon, sortDescSmallIcon } from '@progress/kendo-svg-icons';
import { ContextService } from '../common/provider.service';
import { ColumnMenuItemComponent } from './column-menu-item.component';
import * as i0 from "@angular/core";
import * as i1 from "../common/provider.service";
import * as i2 from "../common/sort.service";
/**
 * Represents the column-menu item for sorting Grid columns.
 * [See example](slug:columnmenu_grid#toc-sort-item).
 *
 * The component can be placed inside a [ColumnMenuTemplate]({% slug api_grid_columnmenutemplatedirective %}) directive.
 * To register the component as a known column menu item, set the [ColumnMenuService]({% slug api_grid_columnmenuservice %}) that is passed by
 * the template to the service input of the `kendo-grid-columnmenu-sort` component. [See example](slug:columnmenu_grid#toc-customizing-the-content).
 *
 * You have to set the [ColumnMenuService]({% slug api_grid_columnmenuservice %}) that is passed by
 * the template to the service input of the `kendo-grid-columnmenu-sort` component.
 *
 * @example
 * ```html
 * <kendo-grid [kendoGridBinding]="data" [sortable]="true" [columnMenu]="true">
 *   <ng-template kendoGridColumnMenuTemplate let-service="service">
 *     <kendo-grid-columnmenu-sort [service]="service">
 *     </kendo-grid-columnmenu-sort>
 *   </ng-template>
 * </kendo-grid>
 * ```
 */
export class ColumnMenuSortComponent extends ColumnMenuItemBase {
    ctx;
    sortService;
    renderer;
    sortAscSmallIcon = sortAscSmallIcon;
    sortDescSmallIcon = sortDescSmallIcon;
    constructor(ctx, sortService, renderer) {
        super();
        this.ctx = ctx;
        this.sortService = sortService;
        this.renderer = renderer;
    }
    get sortedAsc() {
        const descriptor = this.descriptor;
        return descriptor && (!descriptor.dir || descriptor.dir === 'asc');
    }
    get sortedDesc() {
        const descriptor = this.descriptor;
        return descriptor && descriptor.dir === 'desc';
    }
    /**
     * @hidden
     */
    toggleSort(dir) {
        const field = this.service.column.field;
        const { mode, allowUnsort } = normalize(this.service.sortable);
        const descriptor = this.descriptor;
        const sort = mode === 'multiple' ? this.service.sort.filter(s => s.field !== field) : [];
        if (descriptor && descriptor.dir === dir) {
            if (!allowUnsort) {
                return;
            }
        }
        else {
            sort.push({ field, dir });
        }
        this.sortService.sort(sort);
        this.close();
    }
    get descriptor() {
        return [].concat(this.service.sort || []).find(s => s.field === this.service.column.field);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ColumnMenuSortComponent, deps: [{ token: i1.ContextService }, { token: i2.SortService }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ColumnMenuSortComponent, isStandalone: true, selector: "kendo-grid-columnmenu-sort", usesInheritance: true, ngImport: i0, template: `
        <kendo-grid-columnmenu-item
            [text]="ctx.localization.get('sortAscending')"
            icon="sort-asc-small"
            [svgIcon]="sortAscSmallIcon"
            (itemClick)="toggleSort('asc')"
            [selected]="sortedAsc">
        </kendo-grid-columnmenu-item>
        <kendo-grid-columnmenu-item
            [text]="ctx.localization.get('sortDescending')"
            icon="sort-desc-small"
            [svgIcon]="sortDescSmallIcon"
            (itemClick)="toggleSort('desc')"
            [selected]="sortedDesc">
        </kendo-grid-columnmenu-item>
    `, isInline: true, dependencies: [{ kind: "component", type: ColumnMenuItemComponent, selector: "kendo-grid-columnmenu-item", inputs: ["icon", "svgIcon", "text", "selected", "disabled", "expanded", "service"], outputs: ["itemClick", "expand", "collapse"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ColumnMenuSortComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-grid-columnmenu-sort',
                    template: `
        <kendo-grid-columnmenu-item
            [text]="ctx.localization.get('sortAscending')"
            icon="sort-asc-small"
            [svgIcon]="sortAscSmallIcon"
            (itemClick)="toggleSort('asc')"
            [selected]="sortedAsc">
        </kendo-grid-columnmenu-item>
        <kendo-grid-columnmenu-item
            [text]="ctx.localization.get('sortDescending')"
            icon="sort-desc-small"
            [svgIcon]="sortDescSmallIcon"
            (itemClick)="toggleSort('desc')"
            [selected]="sortedDesc">
        </kendo-grid-columnmenu-item>
    `,
                    standalone: true,
                    imports: [ColumnMenuItemComponent]
                }]
        }], ctorParameters: function () { return [{ type: i1.ContextService }, { type: i2.SortService }, { type: i0.Renderer2 }]; } });
