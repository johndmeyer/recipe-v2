/**-----------------------------------------------------------------------------------------
* Copyright Â© 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, Input, EventEmitter, Output, HostBinding, ElementRef, Renderer2, NgZone, HostListener, ContentChildren, QueryList, Optional, SkipSelf, inject } from '@angular/core';
import { PagerTemplateDirective } from "./pager-template.directive";
import { anyChanged, Keys, ResizeSensorComponent } from "@progress/kendo-angular-common";
import { PagerContextService } from "./pager-context.service";
import { Subscription } from "rxjs";
import { DEFAULT_PAGE_SIZE_VALUES, getStylingClasses, DEFAULT_SIZE, replaceMessagePlaceholder } from '../util';
import { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { PagerNavigationService } from './navigation.service';
import { PagerNumericButtonsComponent } from './pager-numeric-buttons.component';
import { PagerInfoComponent } from './pager-info.component';
import { PagerPageSizesComponent } from './pager-page-sizes.component';
import { RESPONSIVE_BREAKPOINT_MEDIUM, RESPONSIVE_BREAKPOINT_LARGE } from './common/constants';
import { PagerNextButtonsComponent } from './pager-next-buttons.component';
import { PagerInputComponent } from './pager-input.component';
import { PagerPrevButtonsComponent } from './pager-prev-buttons.component';
import { NgIf, NgTemplateOutlet } from '@angular/common';
import { LocalizedMessagesDirective } from './localization/localized-messages.directive';
import * as i0 from "@angular/core";
import * as i1 from "./pager-context.service";
import * as i2 from "@progress/kendo-angular-l10n";
import * as i3 from "./navigation.service";
export class PagerComponent {
    pagerContext;
    element;
    localization;
    renderer;
    ngZone;
    navigationService;
    template;
    /**
     * @hidden
     */
    externalTemplate;
    /**
     * Represents the total number of data items in the collection.
     *
     * @default 0
     */
    total = 0;
    /**
     * Defines the number of data items to be skipped.
     *
     * @default 0
     */
    skip = 0;
    /**
     * Defines the number of data items per page.
     */
    pageSize;
    /**
     * Sets the maximum numeric buttons count before the buttons are collapsed.
     *
     * @default 10
     */
    buttonCount = 10;
    /**
     * Toggles the information about the current page and the total number of records.
     *
     * @default true
     */
    info = true;
    /**
     * Defines the type of the pager.
     *
     * @default 'numeric'
     */
    type = 'numeric';
    /**
     * Shows a dropdown for selecting the page size.
     * When set to `true`, the dropdown will contain the default list of options - 5, 10, 20.
     * To customize the list of options, set `pageSizeValues` to an array of the desired values.
     * The array can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.
     */
    set pageSizeValues(pageSizeValues) {
        this._pageSizeValues = Array.isArray(pageSizeValues) ? pageSizeValues : pageSizeValues ? DEFAULT_PAGE_SIZE_VALUES : false;
    }
    get pageSizeValues() {
        return this._pageSizeValues;
    }
    /**
     * Toggles the **Previous** and **Next** buttons.
     *
     * @default true
     */
    previousNext = true;
    /**
     * If set to `true`, the user can use dedicated shortcuts to interact with the Pager ([see example]({% slug keyboard_navigation_pager %})).
     * By default, navigation is disabled and the Pager content is accessible in the normal tab sequence.
     * @default false
     */
    set navigable(value) {
        this._navigable = value;
        this.navigationService.isNavigable = value;
    }
    get navigable() {
        return this._navigable;
    }
    /**
     * Specifies the padding of all Pager elements.
     *
     * The possible values are:
     * * `small`
     * * `medium` (default)
     * * `large`
     * * `none`
     */
    set size(size) {
        const newSize = size ? size : DEFAULT_SIZE;
        this.handleClasses(newSize, 'size');
        this._size = newSize;
    }
    get size() {
        return this._size;
    }
    /**
     * @hidden
     * Toggles the Pager responsive functionality.
     *
     * @default true
     */
    responsive = true;
    /**
     * Fires when the current page of the Pager is changed ([see example](slug:overview_pager)).
     * You have to handle the event yourself and page the data.
     */
    pageChange = new EventEmitter();
    /**
     * Fires when the page size of the Pager is changed.
     * You have to handle the event yourself and page the data.
     * If the event is prevented, the page size will remain unchanged ([see example]({% slug pager_events %})).
     */
    pageSizeChange = new EventEmitter();
    pagerClass = true;
    widgetRole = 'application';
    roleDescription = 'pager';
    keyShortcuts = 'Enter ArrowRight ArrowLeft';
    get hostTabindex() {
        return this.navigable ? '0' : '-1';
    }
    get dir() {
        return this.direction;
    }
    /**
     * @hidden
     */
    focusHandler(ev) {
        const isInnerNavigationEnabled = ev.target !== this.element.nativeElement;
        this.navigationService.toggleInnerNavigation(isInnerNavigationEnabled);
    }
    get totalPages() {
        return Math.ceil((this.total || 0) / this.pageSize);
    }
    get currentPage() {
        return Math.floor((this.skip || 0) / this.pageSize) + 1;
    }
    get templateContext() {
        const context = this._templateContext;
        context.totalPages = this.totalPages;
        context.total = this.total;
        context.skip = this.skip;
        context.pageSize = this.pageSize;
        context.currentPage = this.currentPage;
        return context;
    }
    subscriptions = new Subscription();
    _templateContext = {};
    _pageSizeValues = DEFAULT_PAGE_SIZE_VALUES;
    direction;
    isInnerNavigationEnabled = false;
    _navigable = false;
    _size = DEFAULT_SIZE;
    constructor(pagerContext, element, localization, renderer, ngZone, navigationService) {
        this.pagerContext = pagerContext;
        this.element = element;
        this.localization = localization;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.navigationService = navigationService;
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        if (!navigationService) {
            this.navigationService = inject(PagerNavigationService);
        }
        if (!pagerContext) {
            this.pagerContext = inject(PagerContextService);
        }
        this.pagerContext.localization = localization;
    }
    ngOnInit() {
        this.subscriptions.add(this.pagerContext.pageChange.subscribe(this.changePage.bind(this)));
        this.subscriptions.add(this.pagerContext.pageSizeChange.subscribe(this.changePageSize.bind(this)));
        this.subscriptions.add(this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
        }));
        this.subscriptions.add(this.navigationService.innerNavigationChange.subscribe(this.innerNavigationChange.bind(this)));
        if (this.navigable) {
            const wrapper = this.element.nativeElement;
            this.ngZone.runOutsideAngular(() => {
                this.subscriptions.add(this.renderer.listen(wrapper, 'keydown', this.keyDownHandler.bind(this)));
            });
        }
    }
    ngAfterViewInit() {
        this.responsive && this.resizeHandler();
        this.renderer.setAttribute(this.element.nativeElement, 'aria-label', this.ariaLabel);
        this.subscriptions.add(this.template.changes.subscribe(() => {
            this.responsive && this.resizeHandler();
        }));
        this.handleClasses(this.size, 'size');
    }
    ngOnChanges(changes) {
        if (anyChanged(["pageSize", "skip", "total"], changes, false)) {
            this.pagerContext.notifyChanges({
                pageSize: this.pageSize,
                skip: this.skip,
                total: this.total
            });
            this.renderer.setAttribute(this.element.nativeElement, 'aria-label', this.ariaLabel);
        }
        if (changes['responsive']) {
            this.responsive && this.resizeHandler();
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    changePage(event) {
        this.pageChange.emit(event);
    }
    /**
     * @hidden
     */
    changePageSize(event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            if (event.newPageSize === 'all') {
                this.pageChange.emit({ skip: 0, take: this.total });
            }
            else {
                this.pageChange.emit({ skip: 0, take: event.newPageSize });
            }
        }
    }
    /**
     * @hidden
     */
    onPageSizeChange(event) {
        this.pageSizeChange.emit(event);
        if (!event.isDefaultPrevented()) {
            this.pageChange.emit({ skip: this.skip, take: event.newPageSize });
        }
    }
    /**
     * @hidden
     */
    resizeHandler = () => {
        if (this.template?.first && !this.responsive) {
            return;
        }
        const width = this.element.nativeElement.offsetWidth;
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                const numericButtonsElement = this.element.nativeElement.querySelector('kendo-datapager-numeric-buttons, kendo-pager-numeric-buttons');
                const pagerInfoElement = this.element.nativeElement.querySelector('.k-pager-info');
                const pagerPageSizes = this.element.nativeElement.querySelector('.k-pager-sizes');
                if (numericButtonsElement) {
                    const selectElement = numericButtonsElement.querySelector('select');
                    const numbersElement = numericButtonsElement.querySelector('.k-pager-numbers');
                    if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                        this.renderer.removeClass(selectElement, 'k-hidden');
                        this.renderer.addClass(numbersElement, 'k-hidden');
                    }
                    else {
                        this.renderer.addClass(selectElement, 'k-hidden');
                        this.renderer.removeClass(numbersElement, 'k-hidden');
                    }
                }
                if (pagerInfoElement) {
                    if (width < RESPONSIVE_BREAKPOINT_LARGE) {
                        this.renderer.addClass(pagerInfoElement, 'k-hidden');
                    }
                    else {
                        this.renderer.removeClass(pagerInfoElement, 'k-hidden');
                    }
                }
                if (pagerPageSizes) {
                    if (width < RESPONSIVE_BREAKPOINT_MEDIUM) {
                        this.renderer.addClass(pagerPageSizes, 'k-hidden');
                    }
                    else {
                        this.renderer.removeClass(pagerPageSizes, 'k-hidden');
                    }
                }
            });
        });
    };
    get ariaLabel() {
        const localizationMsg = this.localization.get('ariaLabel') || '';
        return replaceMessagePlaceholder(replaceMessagePlaceholder(localizationMsg, 'currentPage', this.currentPage.toString()), 'totalPages', this.totalPages.toString());
    }
    keyDownHandler(e) {
        const target = e.target;
        const wrapper = this.element.nativeElement;
        const isArrowLeftOrPageUp = e.keyCode === Keys.ArrowLeft || e.keyCode === Keys.PageUp;
        const isArrowRightOrPageDown = e.keyCode === Keys.ArrowRight || e.keyCode === Keys.PageDown;
        const isEnter = e.keyCode === Keys.Enter;
        const isHome = e.keyCode === Keys.Home;
        const isEnd = e.keyCode === Keys.End;
        const isEsc = e.keyCode === Keys.Escape;
        const isTab = e.keyCode === Keys.Tab;
        const isFirstPage = this.currentPage === 1;
        const isLastPage = this.currentPage === this.totalPages;
        this.ngZone.run(() => {
            if (isHome) {
                if (e.target !== wrapper) {
                    return;
                }
                e.preventDefault();
                !isFirstPage && this.pagerContext.changePage(0);
            }
            else if (isEnd) {
                e.preventDefault();
                if (e.target !== wrapper) {
                    return;
                }
                !isLastPage && this.pagerContext.changePage(this.totalPages - 1);
            }
            else if (this.isInnerNavigationEnabled) {
                if (isEsc) {
                    this.navigationService.toggleInnerNavigation(false);
                    wrapper.focus();
                }
                else if (isTab) {
                    this.navigationService.keepFocusWithinComponent(wrapper, target, e);
                }
            }
            else {
                if (e.target !== wrapper) {
                    return;
                }
                if (isArrowLeftOrPageUp) {
                    e.preventDefault();
                    !isFirstPage && this.pagerContext.prevPage();
                }
                else if (isArrowRightOrPageDown) {
                    e.preventDefault();
                    !isLastPage && this.pagerContext.nextPage();
                }
                else if (isEnter) {
                    e.preventDefault();
                    const [firstFocusable] = this.navigationService.getFirstAndLastFocusable(wrapper);
                    this.navigationService.toggleInnerNavigation(true);
                    firstFocusable?.focus();
                }
            }
        });
    }
    innerNavigationChange(value) {
        this.isInnerNavigationEnabled = value;
    }
    handleClasses(value, input) {
        const elem = this.element.nativeElement;
        const classes = getStylingClasses('pager', input, this[input], value);
        if (classes.toRemove) {
            this.renderer.removeClass(elem, classes.toRemove);
        }
        if (classes.toAdd) {
            this.renderer.addClass(elem, classes.toAdd);
        }
    }
    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PagerComponent, deps: [{ token: i1.PagerContextService, optional: true, skipSelf: true }, { token: i0.ElementRef }, { token: i2.LocalizationService }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: i3.PagerNavigationService, optional: true, skipSelf: true }], target: i0.ÉµÉµFactoryTarget.Component });
    static Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: PagerComponent, isStandalone: true, selector: "kendo-datapager, kendo-pager", inputs: { externalTemplate: "externalTemplate", total: "total", skip: "skip", pageSize: "pageSize", buttonCount: "buttonCount", info: "info", type: "type", pageSizeValues: "pageSizeValues", previousNext: "previousNext", navigable: "navigable", size: "size", responsive: "responsive" }, outputs: { pageChange: "pageChange", pageSizeChange: "pageSizeChange" }, host: { listeners: { "focusin": "focusHandler($event)" }, properties: { "class.k-pager": "this.pagerClass", "attr.role": "this.widgetRole", "attr.aria-roledescription": "this.roleDescription", "attr.aria-keyshortcuts": "this.keyShortcuts", "attr.tabindex": "this.hostTabindex", "attr.dir": "this.dir" } }, providers: [
            LocalizationService,
            PagerContextService,
            PagerNavigationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.pager'
            }
        ], queries: [{ propertyName: "template", predicate: PagerTemplateDirective }], exportAs: ["kendoDataPager", "kendoPager"], usesOnChanges: true, ngImport: i0, template: `
        <ng-container kendoPagerLocalizedMessages
            i18n-ariaLabel="kendo.pager.ariaLabel|The value of the aria-label attribute of the Pager"
            ariaLabel="{{ 'Page navigation, page {currentPage} of {totalPages}' }}"

            i18n-firstPage="kendo.pager.firstPage|The label for the first page button in the Pager"
            firstPage="Go to the first page"

            i18n-previousPage="kendo.pager.previousPage|The label for the previous page button in the Pager"
            previousPage="Go to the previous page"

            i18n-nextPage="kendo.pager.nextPage|The label for the next page button in the Pager"
            nextPage="Go to the next page"

            i18n-lastPage="kendo.pager.lastPage|The label for the last page button in the Pager"
            lastPage="Go to the last page"

            i18n-page="kendo.pager.page|The label before the current page number in the Pager"
            page="Page"

            i18n-of="kendo.pager.of|The label before the total pages number in the Pager"
            of="of"

            i18n-pageNumberInputTitle="kendo.pager.pageNumberInputTitle|The label for the pager input in the Pager"
            pageNumberInputTitle="Page Number"

            i18n-items="kendo.pager.items|The label after the total pages number in the Pager"
            items="items"

            i18n-itemsPerPage="kendo.pager.itemsPerPage|The label for the page size chooser in the Pager"
            itemsPerPage="items per page"

            i18n-selectPage="kendo.pager.selectPage|The text of the title and aria-label attributes applied to the page chooser in the Pager"
            selectPage="Select page"

            i18n-inputLabel="kendo.pager.inputLabel|The text of the aria-label attribute applied to the input element for entering the page number."
            inputLabel="Type a page number"
         >
        </ng-container>
        <ng-container
            *ngIf="template.first?.templateRef; else default"
            [ngTemplateOutlet]="template.first?.templateRef"
            [ngTemplateOutletContext]="templateContext">
        </ng-container>
        <ng-template #default>
            <div class="k-pager-numbers-wrap">
                <kendo-pager-prev-buttons [size]="size" *ngIf="previousNext"></kendo-pager-prev-buttons>
                <kendo-pager-numeric-buttons
                    [size]="size"
                    *ngIf="type === 'numeric' && buttonCount > 0"
                    [buttonCount]="buttonCount">
                </kendo-pager-numeric-buttons>
                <kendo-pager-input [size]="size" *ngIf="type === 'input'"></kendo-pager-input>
                <kendo-pager-next-buttons [size]="size" *ngIf="previousNext"></kendo-pager-next-buttons>
            </div>
            <kendo-pager-page-sizes *ngIf="pageSizeValues"
                [size]="size"
                [pageSizes]="pageSizeValues">
            </kendo-pager-page-sizes>
            <kendo-pager-info *ngIf="info">
            </kendo-pager-info>
        </ng-template>
        <kendo-resize-sensor *ngIf="responsive" (resize)="resizeHandler()"></kendo-resize-sensor>
  `, isInline: true, dependencies: [{ kind: "directive", type: LocalizedMessagesDirective, selector: "[kendoPagerLocalizedMessages]" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: PagerPrevButtonsComponent, selector: "kendo-datapager-prev-buttons, kendo-pager-prev-buttons", inputs: ["size"] }, { kind: "component", type: PagerNumericButtonsComponent, selector: "kendo-datapager-numeric-buttons, kendo-pager-numeric-buttons", inputs: ["buttonCount", "size"] }, { kind: "component", type: PagerInputComponent, selector: "kendo-datapager-input, kendo-pager-input", inputs: ["size"] }, { kind: "component", type: PagerNextButtonsComponent, selector: "kendo-datapager-next-buttons, kendo-pager-next-buttons", inputs: ["size"] }, { kind: "component", type: PagerPageSizesComponent, selector: "kendo-datapager-page-sizes, kendo-pager-page-sizes", inputs: ["pageSizes", "size"] }, { kind: "component", type: PagerInfoComponent, selector: "kendo-datapager-info, kendo-pager-info" }, { kind: "component", type: ResizeSensorComponent, selector: "kendo-resize-sensor", inputs: ["rateLimit"], outputs: ["resize"] }] });
}
i0.ÉµÉµngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PagerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-datapager, kendo-pager',
                    exportAs: 'kendoDataPager, kendoPager',
                    providers: [
                        LocalizationService,
                        PagerContextService,
                        PagerNavigationService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.pager'
                        }
                    ],
                    template: `
        <ng-container kendoPagerLocalizedMessages
            i18n-ariaLabel="kendo.pager.ariaLabel|The value of the aria-label attribute of the Pager"
            ariaLabel="{{ 'Page navigation, page {currentPage} of {totalPages}' }}"

            i18n-firstPage="kendo.pager.firstPage|The label for the first page button in the Pager"
            firstPage="Go to the first page"

            i18n-previousPage="kendo.pager.previousPage|The label for the previous page button in the Pager"
            previousPage="Go to the previous page"

            i18n-nextPage="kendo.pager.nextPage|The label for the next page button in the Pager"
            nextPage="Go to the next page"

            i18n-lastPage="kendo.pager.lastPage|The label for the last page button in the Pager"
            lastPage="Go to the last page"

            i18n-page="kendo.pager.page|The label before the current page number in the Pager"
            page="Page"

            i18n-of="kendo.pager.of|The label before the total pages number in the Pager"
            of="of"

            i18n-pageNumberInputTitle="kendo.pager.pageNumberInputTitle|The label for the pager input in the Pager"
            pageNumberInputTitle="Page Number"

            i18n-items="kendo.pager.items|The label after the total pages number in the Pager"
            items="items"

            i18n-itemsPerPage="kendo.pager.itemsPerPage|The label for the page size chooser in the Pager"
            itemsPerPage="items per page"

            i18n-selectPage="kendo.pager.selectPage|The text of the title and aria-label attributes applied to the page chooser in the Pager"
            selectPage="Select page"

            i18n-inputLabel="kendo.pager.inputLabel|The text of the aria-label attribute applied to the input element for entering the page number."
            inputLabel="Type a page number"
         >
        </ng-container>
        <ng-container
            *ngIf="template.first?.templateRef; else default"
            [ngTemplateOutlet]="template.first?.templateRef"
            [ngTemplateOutletContext]="templateContext">
        </ng-container>
        <ng-template #default>
            <div class="k-pager-numbers-wrap">
                <kendo-pager-prev-buttons [size]="size" *ngIf="previousNext"></kendo-pager-prev-buttons>
                <kendo-pager-numeric-buttons
                    [size]="size"
                    *ngIf="type === 'numeric' && buttonCount > 0"
                    [buttonCount]="buttonCount">
                </kendo-pager-numeric-buttons>
                <kendo-pager-input [size]="size" *ngIf="type === 'input'"></kendo-pager-input>
                <kendo-pager-next-buttons [size]="size" *ngIf="previousNext"></kendo-pager-next-buttons>
            </div>
            <kendo-pager-page-sizes *ngIf="pageSizeValues"
                [size]="size"
                [pageSizes]="pageSizeValues">
            </kendo-pager-page-sizes>
            <kendo-pager-info *ngIf="info">
            </kendo-pager-info>
        </ng-template>
        <kendo-resize-sensor *ngIf="responsive" (resize)="resizeHandler()"></kendo-resize-sensor>
  `,
                    standalone: true,
                    imports: [LocalizedMessagesDirective, NgIf, NgTemplateOutlet, PagerPrevButtonsComponent, PagerNumericButtonsComponent, PagerInputComponent, PagerNextButtonsComponent, PagerPageSizesComponent, PagerInfoComponent, ResizeSensorComponent]
                }]
        }], ctorParameters: function () { return [{ type: i1.PagerContextService, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i0.ElementRef }, { type: i2.LocalizationService }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: i3.PagerNavigationService, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }]; }, propDecorators: { template: [{
                type: ContentChildren,
                args: [PagerTemplateDirective]
            }], externalTemplate: [{
                type: Input
            }], total: [{
                type: Input
            }], skip: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], buttonCount: [{
                type: Input
            }], info: [{
                type: Input
            }], type: [{
                type: Input
            }], pageSizeValues: [{
                type: Input
            }], previousNext: [{
                type: Input
            }], navigable: [{
                type: Input
            }], size: [{
                type: Input
            }], responsive: [{
                type: Input
            }], pageChange: [{
                type: Output
            }], pageSizeChange: [{
                type: Output
            }], pagerClass: [{
                type: HostBinding,
                args: ['class.k-pager']
            }], widgetRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], roleDescription: [{
                type: HostBinding,
                args: ['attr.aria-roledescription']
            }], keyShortcuts: [{
                type: HostBinding,
                args: ['attr.aria-keyshortcuts']
            }], hostTabindex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], dir: [{
                type: HostBinding,
                args: ['attr.dir']
            }], focusHandler: [{
                type: HostListener,
                args: ['focusin', ['$event']]
            }] } });
