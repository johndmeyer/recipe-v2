/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnChanges, SimpleChanges, OnInit, OnDestroy, ElementRef, Renderer2, NgZone, AfterViewInit, QueryList } from '@angular/core';
import { PageChangeEvent } from './change-event-args.interface';
import { PagerTemplateDirective } from "./pager-template.directive";
import { PagerContextService } from "./pager-context.service";
import { PageSizeChangeEvent } from './pagesizechange-event';
import { PageSizeItem } from './pagesize-item.interface';
import { PagerType } from './common/pager-type';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { PagerNavigationService } from './navigation.service';
import { PagerSize } from './common/pager-size';
import * as i0 from "@angular/core";
export declare class PagerComponent implements OnChanges, AfterViewInit, OnInit, OnDestroy {
    private pagerContext;
    private element;
    private localization;
    private renderer;
    private ngZone;
    private navigationService;
    template: QueryList<PagerTemplateDirective>;
    /**
     * @hidden
     */
    externalTemplate: any;
    /**
     * Represents the total number of data items in the collection.
     *
     * @default 0
     */
    total: number;
    /**
     * Defines the number of data items to be skipped.
     *
     * @default 0
     */
    skip: number;
    /**
     * Defines the number of data items per page.
     */
    pageSize: number;
    /**
     * Sets the maximum numeric buttons count before the buttons are collapsed.
     *
     * @default 10
     */
    buttonCount: number;
    /**
     * Toggles the information about the current page and the total number of records.
     *
     * @default true
     */
    info: boolean;
    /**
     * Defines the type of the pager.
     *
     * @default 'numeric'
     */
    type: PagerType;
    /**
     * Shows a dropdown for selecting the page size.
     * When set to `true`, the dropdown will contain the default list of options - 5, 10, 20.
     * To customize the list of options, set `pageSizeValues` to an array of the desired values.
     * The array can contain numbers and [PageSizeItem]({% slug api_pager_pagesizeitem %}) objects.
     */
    set pageSizeValues(pageSizeValues: boolean | Array<number | PageSizeItem>);
    get pageSizeValues(): boolean | Array<number | PageSizeItem>;
    /**
     * Toggles the **Previous** and **Next** buttons.
     *
     * @default true
     */
    previousNext: boolean;
    /**
     * If set to `true`, the user can use dedicated shortcuts to interact with the Pager ([see example]({% slug keyboard_navigation_pager %})).
     * By default, navigation is disabled and the Pager content is accessible in the normal tab sequence.
     * @default false
     */
    set navigable(value: boolean);
    get navigable(): boolean;
    /**
     * Specifies the padding of all Pager elements.
     *
     * The possible values are:
     * * `small`
     * * `medium` (default)
     * * `large`
     * * `none`
     */
    set size(size: PagerSize);
    get size(): PagerSize;
    /**
     * @hidden
     * Toggles the Pager responsive functionality.
     *
     * @default true
     */
    responsive: boolean;
    /**
     * Fires when the current page of the Pager is changed ([see example](slug:overview_pager)).
     * You have to handle the event yourself and page the data.
     */
    pageChange: EventEmitter<PageChangeEvent>;
    /**
     * Fires when the page size of the Pager is changed.
     * You have to handle the event yourself and page the data.
     * If the event is prevented, the page size will remain unchanged ([see example]({% slug pager_events %})).
     */
    pageSizeChange: EventEmitter<PageSizeChangeEvent>;
    pagerClass: boolean;
    widgetRole: string;
    roleDescription: string;
    keyShortcuts: string;
    get hostTabindex(): string;
    get dir(): string;
    /**
     * @hidden
     */
    focusHandler(ev: any): void;
    get totalPages(): number;
    get currentPage(): number;
    get templateContext(): any;
    private subscriptions;
    private _templateContext;
    private _pageSizeValues;
    private direction;
    private isInnerNavigationEnabled;
    private _navigable;
    private _size;
    constructor(pagerContext: PagerContextService, element: ElementRef, localization: LocalizationService, renderer: Renderer2, ngZone: NgZone, navigationService: PagerNavigationService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    changePage(event: PageChangeEvent): void;
    /**
     * @hidden
     */
    changePageSize(event: PageSizeChangeEvent): void;
    /**
     * @hidden
     */
    onPageSizeChange(event: PageSizeChangeEvent): void;
    /**
     * @hidden
     */
    resizeHandler: () => void;
    private get ariaLabel();
    private keyDownHandler;
    private innerNavigationChange;
    private handleClasses;
    static ɵfac: i0.ɵɵFactoryDeclaration<PagerComponent, [{ optional: true; skipSelf: true; }, null, null, null, null, { optional: true; skipSelf: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PagerComponent, "kendo-datapager, kendo-pager", ["kendoDataPager", "kendoPager"], { "externalTemplate": { "alias": "externalTemplate"; "required": false; }; "total": { "alias": "total"; "required": false; }; "skip": { "alias": "skip"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "buttonCount": { "alias": "buttonCount"; "required": false; }; "info": { "alias": "info"; "required": false; }; "type": { "alias": "type"; "required": false; }; "pageSizeValues": { "alias": "pageSizeValues"; "required": false; }; "previousNext": { "alias": "previousNext"; "required": false; }; "navigable": { "alias": "navigable"; "required": false; }; "size": { "alias": "size"; "required": false; }; "responsive": { "alias": "responsive"; "required": false; }; }, { "pageChange": "pageChange"; "pageSizeChange": "pageSizeChange"; }, ["template"], never, true, never>;
}
