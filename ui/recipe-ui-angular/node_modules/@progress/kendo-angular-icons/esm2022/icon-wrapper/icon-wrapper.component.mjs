/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, HostBinding, Input, isDevMode } from '@angular/core';
import { Subscription } from 'rxjs';
import { IconsService } from '../common/icons.service';
import { NgClass, NgIf } from '@angular/common';
import { IconComponent } from '../icon/icon.component';
import { SVGIconComponent } from '../svg-icon/svg-icon.component';
import * as i0 from "@angular/core";
import * as i1 from "../common/icons.service";
/**
 * @hidden
 */
export class IconWrapperComponent {
    iconsService;
    hostClass = true;
    /**
     * Defines the name for an existing font icon in a Kendo UI theme, which will be rendered.
     * All [Kendo UI Icons]({% slug icons %}#toc-list-of-font-icons) are supported.
     */
    name;
    /**
     * Defines an [SVGIcon](slug:api_icons_svgicon) to be rendered.
     */
    svgIcon;
    /**
     * Provided by consuming components in case an additional k-specific class needs to be rendered
     * on the internal Icon component.
     */
    innerCssClass = '';
    /**
     * Provided by consuming components in case a custom font icon class is set
     * by the developer using the consuming component through its API.
     */
    customFontClass = '';
    /**
     * Specifies the size of the Icon.
     *
     * The possible values are:
     * * `default` (Default) (Font-size: 16px; Width: 16px; Height: 16px)
     * * `xsmall` (Font-size: 12px; Width: 12px; Height: 12px;)
     * * `small` (Font-size: 14px; Width: 14px; Height: 14px;)
     * * `medium` (Font-size: 16px; Width: 16px; Height: 16px;)
     * * `large` (Font-size: 20px; Width: 20px; Height: 20px;)
     * * `xlarge` (Font-size: 24px; Width: 24px; Height: 24px;)
     * * `xxlarge` (Font-size: 32px; Width: 32px; Height: 32px;)
     * * `xxxlarge` (Font-size: 48px; Width: 48px; Height: 48px;)
     *
     */
    size;
    get customClasses() {
        const classes = [this.customFontClass, this.innerCssClass, this.customFontIconClass].filter(cl => !!cl).join(' ');
        return classes;
    }
    iconSettings;
    get hasSvgIcon() {
        this.svgIcon = this.iconsService.getSvgIcon(this.name) || this.svgIcon;
        if (this.svgIcon) {
            return true;
        }
        if (isDevMode()) {
            console.groupCollapsed(`Kendo UI for Angular: Icon type is set to 'svg', but only font icon name is provided. The "${this.name}" font icon will be rendered instead.`);
            console.warn(`
Starting from v7.0.0 (October, 2023) of the Kendo Themes, the font icons will be removed from the theme.
* To render an SVG icon, update the component configuration by setting the "svgIcon" input to the respective icon definition.
* To continue to use font icons, install the "@progress/kendo-font-icons" package and import "@progress/kendo-font-icons/dist/index.css".

Please note, that font icons are not compatible with a strict Content Security Policy and require the use of the "unsafe-inline" override.

For further details, check the following documentation articles:
https://www.telerik.com/kendo-angular-ui/components/icons/icon-settings
https://www.telerik.com/kendo-angular-ui/components/styling/icons/
https://www.telerik.com/kendo-angular-ui/components/styling/svg-icons/
https://www.telerik.com/design-system/docs/foundation/iconography/font-icons/
https://www.telerik.com/design-system/docs/foundation/iconography/icon-list/
            `);
            console.groupEnd();
        }
        return false;
    }
    get customFontIconClass() {
        return this.iconsService.getCustomFontIconClass(this.name) || this.customFontClass;
    }
    subs = new Subscription();
    constructor(iconsService) {
        this.iconsService = iconsService;
        this.subs = iconsService.changes.subscribe(iconSettings => {
            this.iconSettings = iconSettings;
        });
    }
    ngOnDestroy() {
        this.subs.unsubscribe();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: IconWrapperComponent, deps: [{ token: i1.IconsService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: IconWrapperComponent, isStandalone: true, selector: "kendo-icon-wrapper", inputs: { name: "name", svgIcon: "svgIcon", innerCssClass: "innerCssClass", customFontClass: "customFontClass", size: "size" }, host: { properties: { "class.k-icon-wrapper-host": "this.hostClass" } }, exportAs: ["kendoIconWrapper"], ngImport: i0, template: `
        <kendo-svgicon
            *ngIf="iconSettings?.type === 'svg' && hasSvgIcon; else font"
            [ngClass]="innerCssClass"
            [icon]="svgIcon"
            [size]="size || iconSettings?.size"
            [themeColor]="iconSettings?.themeColor"
            [flip]="iconSettings?.flip"></kendo-svgicon>
        <ng-template #font>
            <kendo-icon
                *ngIf="!customFontIconClass; else custom"
                [ngClass]="innerCssClass"
                [name]="name"
                [size]="size || iconSettings?.size"
                [themeColor]="iconSettings?.themeColor"
                [flip]="iconSettings?.flip"></kendo-icon>
            <ng-template #custom>
                <span [ngClass]="customClasses"></span>
            </ng-template>
        </ng-template>
    `, isInline: true, dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IconComponent, selector: "kendo-icon", inputs: ["name"], exportAs: ["kendoIcon"] }, { kind: "component", type: SVGIconComponent, selector: "kendo-svg-icon, kendo-svgicon", inputs: ["icon"], exportAs: ["kendoSVGIcon"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: IconWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    exportAs: 'kendoIconWrapper',
                    selector: 'kendo-icon-wrapper',
                    template: `
        <kendo-svgicon
            *ngIf="iconSettings?.type === 'svg' && hasSvgIcon; else font"
            [ngClass]="innerCssClass"
            [icon]="svgIcon"
            [size]="size || iconSettings?.size"
            [themeColor]="iconSettings?.themeColor"
            [flip]="iconSettings?.flip"></kendo-svgicon>
        <ng-template #font>
            <kendo-icon
                *ngIf="!customFontIconClass; else custom"
                [ngClass]="innerCssClass"
                [name]="name"
                [size]="size || iconSettings?.size"
                [themeColor]="iconSettings?.themeColor"
                [flip]="iconSettings?.flip"></kendo-icon>
            <ng-template #custom>
                <span [ngClass]="customClasses"></span>
            </ng-template>
        </ng-template>
    `,
                    standalone: true,
                    imports: [NgClass, NgIf, IconComponent, SVGIconComponent]
                }]
        }], ctorParameters: function () { return [{ type: i1.IconsService }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class.k-icon-wrapper-host']
            }], name: [{
                type: Input
            }], svgIcon: [{
                type: Input
            }], innerCssClass: [{
                type: Input
            }], customFontClass: [{
                type: Input
            }], size: [{
                type: Input
            }] } });
