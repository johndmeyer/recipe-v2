/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, ElementRef, OnChanges, Renderer2 } from '@angular/core';
import { SVGIcon } from '@progress/kendo-svg-icons';
import { TimelineEvent } from './models/timeline-event';
import { Orientation } from '../common/orientation';
import { TimelineService } from './timeline.service';
import { TimelineCardHeaderTemplateDirective } from './templates/timeline-card-header.directive';
import { TimelineCardBodyTemplateDirective } from './templates/timeline-card-body.directive';
import { TimelineCardActionsTemplateDirective } from './templates/timeline-card-actions.directive';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class TimelineCardComponent implements OnChanges, AfterViewInit {
    element: ElementRef;
    private timelineService;
    private renderer;
    event: TimelineEvent;
    expanded: boolean;
    collapsible: boolean;
    reversed: boolean;
    orientation: Orientation;
    navigable: boolean;
    tabIndex: string;
    animationDuration: number;
    index: number;
    eventWidth: number;
    eventHeight: number;
    headerTemplate: TimelineCardHeaderTemplateDirective;
    bodyTemplate: TimelineCardBodyTemplateDirective;
    actionsTemplate: TimelineCardActionsTemplateDirective;
    set calloutStyle(value: any);
    calloutElementRef: ElementRef;
    hostClass: boolean;
    get collapsedClass(): boolean;
    onComponentKeyDown(event: any): void;
    get role(): string;
    get ariaLive(): any;
    get ariaExpanded(): any;
    calloutSvgIcon: SVGIcon;
    calloutFontIcon: string;
    private animationState;
    private animationInProgress;
    constructor(element: ElementRef, timelineService: TimelineService, renderer: Renderer2);
    ngAfterViewInit(): void;
    ngOnChanges(changes: any): void;
    toggle(): void;
    expand(): void;
    collapse(): void;
    onActionClick(event: MouseEvent): void;
    animationStart(): void;
    animationDone(event: any): void;
    private makeOverflowVisible;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimelineCardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimelineCardComponent, "kendo-timeline-card", ["kendoTimelineCard"], { "event": { "alias": "event"; "required": false; }; "expanded": { "alias": "expanded"; "required": false; }; "collapsible": { "alias": "collapsible"; "required": false; }; "reversed": { "alias": "reversed"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "navigable": { "alias": "navigable"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "animationDuration": { "alias": "animationDuration"; "required": false; }; "index": { "alias": "index"; "required": false; }; "eventWidth": { "alias": "eventWidth"; "required": false; }; "eventHeight": { "alias": "eventHeight"; "required": false; }; "headerTemplate": { "alias": "headerTemplate"; "required": false; }; "bodyTemplate": { "alias": "bodyTemplate"; "required": false; }; "actionsTemplate": { "alias": "actionsTemplate"; "required": false; }; "calloutStyle": { "alias": "calloutStyle"; "required": false; }; }, {}, never, never, true, never>;
}
