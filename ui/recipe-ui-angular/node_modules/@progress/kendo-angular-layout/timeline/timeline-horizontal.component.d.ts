/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges } from '@angular/core';
import { TimelineEvent } from './models/timeline-event';
import { SVGIcon } from '@progress/kendo-svg-icons';
import { TimelineCardComponent } from './timeline-card.component';
import { TimelineService } from './timeline.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { TimelineCardBodyTemplateDirective } from './templates/timeline-card-body.directive';
import { TimelineCardHeaderTemplateDirective } from './templates/timeline-card-header.directive';
import { TimelineCardActionsTemplateDirective } from './templates/timeline-card-actions.directive';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class TimelineHorizontalComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private cdr;
    private _zone;
    private renderer;
    private timelineService;
    private localization;
    events: Array<TimelineEvent>;
    alterMode: boolean;
    collapsibleEvents: boolean;
    navigable: boolean;
    showDateLabels: boolean;
    animationDuration: number;
    eventHeight: number;
    dateFormat: string;
    headerTemplate: TimelineCardHeaderTemplateDirective;
    bodyTemplate: TimelineCardBodyTemplateDirective;
    actionsTemplate: TimelineCardActionsTemplateDirective;
    cardElementRefs: QueryList<ElementRef>;
    circleElementRefs: QueryList<ElementRef>;
    flagElementRefs: QueryList<ElementRef>;
    trackElementRef: ElementRef;
    scrollableTrackElementRef: ElementRef;
    cardComponents: QueryList<TimelineCardComponent>;
    get selectedEvent(): TimelineEvent;
    set selectedEvent(value: TimelineEvent);
    trackWrapWidth: number;
    scrollableTrackWidth: number;
    cardWidth: number;
    svgLeftIcon: SVGIcon;
    svgRightIcon: SVGIcon;
    calloutStyle: any;
    animationState: string;
    translateValue: number;
    eventsInInterval: number[];
    selectedCardIndex: number;
    selectedEventIndex: number;
    tabFlex: number;
    tabWidth: number;
    visibleTabsCount: number;
    firstCircleInView: number;
    visibleEvents: any[];
    trackItems: any[];
    previousTitle: string;
    nextTitle: string;
    private _selectedEvent;
    private subscriptions;
    constructor(cdr: ChangeDetectorRef, _zone: NgZone, renderer: Renderer2, timelineService: TimelineService, localization: LocalizationService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onResize(): void;
    onTransitionEnd(): void;
    onTrackTransitionEnd(): void;
    onSlideDone(): void;
    previous(): void;
    previousClick(): void;
    next(): void;
    nextClick(): void;
    open(index: number): void;
    navigateToEvent(index: number): void;
    private getOtherSelectedCardIndex;
    tabStyle(): any;
    getTransformation(width: number, position: number): any;
    getState(position: number): string;
    get calloutOffset(): any;
    get isFirstRange(): boolean;
    get isLastRange(): boolean;
    private onCardsChange;
    private onCirclesChange;
    private onKeyDown;
    private focusTrackItem;
    private setTrackItemAttributes;
    private removeTrackItemAttributes;
    private removeCardsAttributes;
    private assignAriaLabel;
    private assignAriaDescribedBy;
    private updateInterval;
    private onHomeKey;
    private onEndKey;
    private onArrowRightKey;
    private onArrowLeftKey;
    private navigateToFirstInterval;
    private navigateToLastInterval;
    private navigateToOtherEvent;
    private navigateToInterval;
    private animateCards;
    private transformCards;
    private changeTabsCount;
    private l10nChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimelineHorizontalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimelineHorizontalComponent, "kendo-timeline-horizontal", ["kendoTimelineHorizontal"], { "events": { "alias": "events"; "required": false; }; "alterMode": { "alias": "alterMode"; "required": false; }; "collapsibleEvents": { "alias": "collapsibleEvents"; "required": false; }; "navigable": { "alias": "navigable"; "required": false; }; "showDateLabels": { "alias": "showDateLabels"; "required": false; }; "animationDuration": { "alias": "animationDuration"; "required": false; }; "eventHeight": { "alias": "eventHeight"; "required": false; }; "dateFormat": { "alias": "dateFormat"; "required": false; }; "headerTemplate": { "alias": "headerTemplate"; "required": false; }; "bodyTemplate": { "alias": "bodyTemplate"; "required": false; }; "actionsTemplate": { "alias": "actionsTemplate"; "required": false; }; }, {}, never, never, true, never>;
}
