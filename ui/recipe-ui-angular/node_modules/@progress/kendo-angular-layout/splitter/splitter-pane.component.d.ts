/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, Renderer2, AfterViewChecked, SimpleChanges } from '@angular/core';
import { Orientation } from '../common/orientation';
import { SplitterService } from './splitter.service';
import * as i0 from "@angular/core";
/**
 * Represents the pane component of the Splitter.
 */
export declare class SplitterPaneComponent implements AfterViewChecked {
    element: ElementRef<HTMLElement>;
    private renderer;
    private cdr;
    private splitterService;
    /**
     * @hidden
     */
    set order(paneOrder: number);
    get order(): number;
    /**
     * Sets the initial size of the pane.
     * Accepts units in pixel and percentage values.
     * Has to be between the `min` and `max` properties.
     */
    set size(newSize: string);
    get size(): string;
    /**
     * Sets the HTML attributes of the splitter bar.
     * The property accepts string key-value based pairs.
     * Attributes which are essential for certain functionalities cannot be changed.
     */
    set splitterBarAttributes(attributes: {
        [key: string]: string;
    });
    get splitterBarAttributes(): {
        [key: string]: string;
    };
    /**
     * The CSS classes that will be rendered on the splitter bar.
     * Supports the type of values that are supported by [`ngClass`](link:site.data.urls.angular['ngclassapi']).
     */
    splitterBarClass: string | Array<string> | Object;
    /**
     * Sets the minimum possible size of the pane.
     * Accepts units in pixel and percentage values.
     */
    min: string;
    /**
     * Sets the maximum possible size of the pane.
     * Accepts units in pixel and percentage values.
     */
    max: string;
    /**
     * Specifies if the user is allowed to resize the pane and provide space for other panes.
     */
    resizable: boolean;
    /**
     * Specifies if the user is allowed to hide the pane and provide space for other panes.
     */
    collapsible: boolean;
    /**
     * Specifies if overflowing content is scrollable or hidden.
     */
    scrollable: boolean;
    /**
     * Specifies if the pane is initially collapsed.
     */
    collapsed: boolean;
    /**
     * @hidden
     */
    orientation: Orientation;
    /**
     * @hidden
     */
    set containsSplitter(value: boolean);
    /**
     * @hidden
     */
    overlayContent: boolean;
    /**
     * Fires each time the user resizes the Splitter pane.
     * The event data contains the new pane size.
     * Allows a two-way binding of the pane `size` property.
     */
    sizeChange: EventEmitter<string>;
    /**
     * Fires each time the `collapsed` property changes.
     * The event data contains the new property state.
     * Allows a two-way binding of the `collapsed` pane property.
     */
    collapsedChange: EventEmitter<boolean>;
    get isHidden(): boolean;
    ariaRole: string;
    hostClass: boolean;
    get scrollablePaneClass(): boolean;
    get fixedSize(): boolean;
    /**
     * @hidden
     */
    forceExpand: boolean;
    /**
     * @hidden
     */
    isResized: boolean;
    private _size;
    private _order;
    private _splitterBarAttributes;
    constructor(element: ElementRef<HTMLElement>, renderer: Renderer2, cdr: ChangeDetectorRef, splitterService: SplitterService);
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @hidden
     */
    get computedSize(): number;
    /**
     * @hidden
     */
    get nativeElement(): HTMLElement;
    /**
     * @hidden
     */
    toggleOverlay(show: boolean): void;
    /**
     * @hidden
     */
    detectChanges(): void;
    private setOrderStyles;
    private setStaticPaneClass;
    static ɵfac: i0.ɵɵFactoryDeclaration<SplitterPaneComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SplitterPaneComponent, "kendo-splitter-pane", ["kendoSplitterPane"], { "order": { "alias": "order"; "required": false; }; "size": { "alias": "size"; "required": false; }; "splitterBarAttributes": { "alias": "splitterBarAttributes"; "required": false; }; "splitterBarClass": { "alias": "splitterBarClass"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "collapsible": { "alias": "collapsible"; "required": false; }; "scrollable": { "alias": "scrollable"; "required": false; }; "collapsed": { "alias": "collapsed"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "containsSplitter": { "alias": "containsSplitter"; "required": false; }; "overlayContent": { "alias": "overlayContent"; "required": false; }; }, { "sizeChange": "sizeChange"; "collapsedChange": "collapsedChange"; }, never, ["*"], true, never>;
}
