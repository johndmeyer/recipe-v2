/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ContentChild, Component, ElementRef, HostBinding, Input, Renderer2, ViewChild } from '@angular/core';
import { Subscription } from 'rxjs';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { KendoInput, guid } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { LabelDirective } from './../label.directive';
import { getWrappedNativeInput } from './../util';
import { NgClass, NgStyle, NgIf } from '@angular/common';
import { LocalizedMessagesDirective } from '../localization/localized-messages.directive';
import * as i0 from "@angular/core";
import * as i1 from "@progress/kendo-angular-l10n";
/**
 * Represents the [Kendo UI Label component for Angular]({% slug overview_label %}).
 *
 * Associates a label with input elements or components.
 *
 * @example
 * ```html
 * <kendo-label [for]="input" text="First name">
 *   <kendo-textbox #input></kendo-textbox>
 * </kendo-label>
 * ```
 */
export class LabelComponent {
    elementRef;
    renderer;
    localization;
    /**
     * @hidden
     */
    direction;
    /**
     * Specifies the text content of the label which describes the input.
     */
    text;
    /**
     * Associates the label with a component by a template reference, or with an HTML element by id.
     */
    set for(forValue) {
        if (forValue !== this._for) {
            this._for = forValue;
            this.control = forValue;
        }
    }
    get for() {
        return this._for;
    }
    /**
     * Allows marking a form field as optional. By default renders the `Optional` text when enabled.
     * The text can be customized by providing a custom message ([see example]({% slug label_globalization %}#toc-custom-messages)).
     *
     * The default value is `false`.
     */
    optional;
    /**
     * Sets the CSS Styles that will be rendered on the actual label element.
     * Supports the type of values that are supported by [ngStyle](link:site.data.urls.angular['ngstyleapi']) directive.
     */
    labelCssStyle;
    /**
     * Sets the CSS Classes that will be rendered on the actual label element.
     * Supports the type of values that are supported by [ngClass](link:site.data.urls.angular['ngclassapi']) directive.
     */
    labelCssClass;
    labelDirective;
    kendoInput;
    /**
     * @hidden
     */
    control;
    subscriptions = new Subscription();
    _for;
    constructor(elementRef, renderer, localization) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.localization = localization;
        validatePackage(packageMetadata);
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.renderer.removeAttribute(this.elementRef.nativeElement, 'id');
    }
    /**
     * @hidden
     */
    ngAfterContentInit() {
        if (this.for) {
            return;
        }
        const wrappedNativeInput = getWrappedNativeInput(this.elementRef.nativeElement);
        if (wrappedNativeInput) {
            if (!wrappedNativeInput.hasAttribute('id')) {
                this.renderer.setAttribute(wrappedNativeInput, 'id', `k-${guid()}`);
            }
            this.control = wrappedNativeInput;
            return;
        }
        this.control = this.kendoInput;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.subscriptions.add(this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
        }));
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        this.labelDirective.setAriaLabelledby();
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    textFor(key) {
        return this.localization.get(key);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LabelComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1.LocalizationService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: LabelComponent, isStandalone: true, selector: "kendo-label", inputs: { text: "text", for: "for", optional: "optional", labelCssStyle: "labelCssStyle", labelCssClass: "labelCssClass" }, host: { properties: { "attr.dir": "this.direction" } }, providers: [
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.label'
            }
        ], queries: [{ propertyName: "kendoInput", first: true, predicate: KendoInput, descendants: true, static: true }], viewQueries: [{ propertyName: "labelDirective", first: true, predicate: LabelDirective, descendants: true, static: true }], exportAs: ["kendoLabel"], ngImport: i0, template: `
        <ng-container kendoLabelLocalizedMessages
            i18n-optional="kendo.label.optional|The text for the optional segment of a Label component"
            optional="Optional"
         >
        </ng-container>
        <label
            [for]="control"
            [class.k-label-empty]="!text"
            [ngClass]="labelCssClass"
            [ngStyle]="labelCssStyle"
        >
            {{ text }}<span *ngIf="optional" class="k-label-optional">({{textFor('optional')}})</span>
        </label>
        <ng-content></ng-content>
    `, isInline: true, dependencies: [{ kind: "directive", type: LocalizedMessagesDirective, selector: "\n      [kendoLabelLocalizedMessages],\n      [kendoFloatingLabelLocalizedMessages]\n    " }, { kind: "directive", type: LabelDirective, selector: "label[for]", inputs: ["for", "labelClass"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'kendo-label',
                    exportAs: 'kendoLabel',
                    providers: [
                        LocalizationService,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.label'
                        }
                    ],
                    template: `
        <ng-container kendoLabelLocalizedMessages
            i18n-optional="kendo.label.optional|The text for the optional segment of a Label component"
            optional="Optional"
         >
        </ng-container>
        <label
            [for]="control"
            [class.k-label-empty]="!text"
            [ngClass]="labelCssClass"
            [ngStyle]="labelCssStyle"
        >
            {{ text }}<span *ngIf="optional" class="k-label-optional">({{textFor('optional')}})</span>
        </label>
        <ng-content></ng-content>
    `,
                    standalone: true,
                    imports: [LocalizedMessagesDirective, LabelDirective, NgClass, NgStyle, NgIf]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.LocalizationService }]; }, propDecorators: { direction: [{
                type: HostBinding,
                args: ['attr.dir']
            }], text: [{
                type: Input
            }], for: [{
                type: Input
            }], optional: [{
                type: Input
            }], labelCssStyle: [{
                type: Input
            }], labelCssClass: [{
                type: Input
            }], labelDirective: [{
                type: ViewChild,
                args: [LabelDirective, { static: true }]
            }], kendoInput: [{
                type: ContentChild,
                args: [KendoInput, { static: true }]
            }] } });
