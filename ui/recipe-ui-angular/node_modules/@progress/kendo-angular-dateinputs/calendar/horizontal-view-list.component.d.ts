/**-----------------------------------------------------------------------------------------
* Copyright © 2024 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, EventEmitter, OnChanges, TemplateRef, OnDestroy, ElementRef, Renderer2 } from '@angular/core';
import { BusViewService } from './services/bus-view.service';
import { ViewService } from './models/view-service.interface';
import { IntlService } from '@progress/kendo-angular-intl';
import { SelectionRangeEnd } from './models/selection-range-end.type';
import { SelectionRange } from './models/selection-range.interface';
import { Action } from './models/navigation-action.enum';
import { CalendarViewEnum } from './models/view.enum';
import { CalendarOrientation } from './models/orientation';
import { WeekDaysFormat } from '../common/models/week-days-format';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export declare class HorizontalViewListComponent implements OnChanges, OnDestroy {
    private bus;
    intl: IntlService;
    private cdr;
    private element;
    private renderer;
    handleMultiViewCalendarFocus(): void;
    handleMultiViewCalendarBlur(event: any): void;
    /**
     * Needed for the MultiViewCalendar used in the Scheduler Year view
     */
    showOtherMonthDays: boolean;
    cellTemplateRef: TemplateRef<any>;
    weekNumberTemplateRef: TemplateRef<any>;
    allowReverse: boolean;
    activeRangeEnd: SelectionRangeEnd;
    activeView: CalendarViewEnum;
    cellUID: string;
    focusedDate: Date;
    isActive: boolean;
    min: Date;
    max: Date;
    selectionRange: SelectionRange;
    selectedDates: Date[];
    views: number;
    showViewHeader: boolean;
    animateNavigation: boolean;
    orientation: CalendarOrientation;
    activeDescendant: string;
    tabIndex: number;
    disabled: boolean;
    id: string;
    weekDaysFormat: WeekDaysFormat;
    get weekNumber(): boolean;
    set weekNumber(showWeekNumbers: boolean);
    cellClick: EventEmitter<any>;
    weekNumberCellClick: EventEmitter<Date[]>;
    cellEnter: EventEmitter<Date>;
    cellLeave: EventEmitter<Date>;
    activeDateChange: EventEmitter<Date>;
    focusCalendar: EventEmitter<void>;
    blurCalendar: EventEmitter<any>;
    focusedCellChange: EventEmitter<string>;
    getComponentClass: boolean;
    get horizontalHostClass(): boolean;
    get verticalHostClass(): boolean;
    get getComponentMonthClass(): boolean;
    get getComponentYearClass(): boolean;
    get getComponentDecadeClass(): boolean;
    get getComponentCenturyClass(): boolean;
    get role(): string;
    get tabindex(): string;
    get getActiveDescendant(): string;
    get getTabIndex(): number;
    service: ViewService;
    weekNames: string[];
    wideWeekNames: string[];
    activeDate: Date;
    dates: Date[];
    skip: number;
    total: number;
    nextAnimationDate: Date;
    prevAnimationDate: Date;
    private showWeekNumbers;
    private intlSubscription;
    private animation;
    constructor(bus: BusViewService, intl: IntlService, cdr: ChangeDetectorRef, element: ElementRef<HTMLElement>, renderer: Renderer2);
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    initService(): void;
    isMonthView(): boolean;
    getCaptionTitle(date: Date): string;
    handleClassicCalendarFocus(): void;
    handleClassicCalendarBlur(event: any): void;
    animateView(action: Action): void;
    navigate(action: Action): Date;
    canNavigate(action: Action): boolean;
    private getWeekNames;
    private intlChange;
    private clampDate;
    private move;
    private isListInRange;
    private isInDates;
    private getTake;
    private setAriaActivedescendant;
    static ɵfac: i0.ɵɵFactoryDeclaration<HorizontalViewListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<HorizontalViewListComponent, "kendo-calendar-horizontal", never, { "showOtherMonthDays": { "alias": "showOtherMonthDays"; "required": false; }; "cellTemplateRef": { "alias": "cellTemplateRef"; "required": false; }; "weekNumberTemplateRef": { "alias": "weekNumberTemplateRef"; "required": false; }; "allowReverse": { "alias": "allowReverse"; "required": false; }; "activeRangeEnd": { "alias": "activeRangeEnd"; "required": false; }; "activeView": { "alias": "activeView"; "required": false; }; "cellUID": { "alias": "cellUID"; "required": false; }; "focusedDate": { "alias": "focusedDate"; "required": false; }; "isActive": { "alias": "isActive"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "selectionRange": { "alias": "selectionRange"; "required": false; }; "selectedDates": { "alias": "selectedDates"; "required": false; }; "views": { "alias": "views"; "required": false; }; "showViewHeader": { "alias": "showViewHeader"; "required": false; }; "animateNavigation": { "alias": "animateNavigation"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "activeDescendant": { "alias": "activeDescendant"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "id": { "alias": "id"; "required": false; }; "weekDaysFormat": { "alias": "weekDaysFormat"; "required": false; }; "weekNumber": { "alias": "weekNumber"; "required": false; }; }, { "cellClick": "cellClick"; "weekNumberCellClick": "weekNumberCellClick"; "cellEnter": "cellEnter"; "cellLeave": "cellLeave"; "activeDateChange": "activeDateChange"; "focusCalendar": "focusCalendar"; "blurCalendar": "blurCalendar"; "focusedCellChange": "focusedCellChange"; }, never, never, true, never>;
}
